name: Build and Deploy Docker Image to Multi-Region EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-push-to-ecr:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    outputs:
      # ✨ 출력 변수 이름 변경 (GitHub Actions의 자동 마스킹 회피 시도) ✨
      built_ecr_registry: ${{ steps.login-ecr.outputs.registry }}
      built_ecr_repository: my-node-app # ECR 리포지토리 이름은 여기서 고정
      built_image_tag: ${{ github.sha }}

    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }} # ECR 리포지토리가 있는 주 리전

      - name: 🏷️ Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🏗️ Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: my-node-app # ✨ 실제 ECR 리포지토리 이름
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "Image pushed to ECR: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy-to-ec2-seoul:
    name: Deploy to EC2 (Seoul)
    runs-on: ubuntu-latest
    needs: build-and-push-to-ecr
    
    steps:
      - name: 🐞 Debug Seoul Variables
        run: |
          echo "Seoul EC2 Host: ${{ secrets.EC2_HOST_SEOUL }}"
          echo "ECR Registry from needs: [${{ needs.build-and-push-to-ecr.outputs.built_ecr_registry }}]"
          echo "ECR Repository from needs: [${{ needs.build-and-push-to-ecr.outputs.built_ecr_repository }}]"
          echo "Image Tag from needs: [${{ needs.build-and-push-to-ecr.outputs.built_image_tag }}]"
      
      - name: 🚚 Deploy to Seoul EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST_SEOUL }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            ECR_REGISTRY_VAL="${{ needs.build-and-push-to-ecr.outputs.built_ecr_registry }}"
            ECR_REPOSITORY_VAL="${{ needs.build-and-push-to-ecr.outputs.built_ecr_repository }}"
            IMAGE_TAG_VAL="${{ needs.build-and-push-to-ecr.outputs.built_image_tag }}"
            
            if [ -z "$ECR_REGISTRY_VAL" ] || [ -z "$ECR_REPOSITORY_VAL" ] || [ -z "$IMAGE_TAG_VAL" ]; then
              echo "오류: ECR 이미지 정보를 제대로 전달받지 못했습니다."
              echo "ECR_REGISTRY_VAL: [$ECR_REGISTRY_VAL]"
              echo "ECR_REPOSITORY_VAL: [$ECR_REPOSITORY_VAL]"
              echo "IMAGE_TAG_VAL: [$IMAGE_TAG_VAL]"
              exit 1
            fi
            
            IMAGE_URI="$ECR_REGISTRY_VAL/$ECR_REPOSITORY_VAL:$IMAGE_TAG_VAL"
            CONTAINER_NAME="my-running-app-seoul"

            echo "배포할 새로운 이미지 URI: $IMAGE_URI"
            docker pull $IMAGE_URI
            if [ $? -ne 0 ]; then echo "docker pull 실패!"; exit 1; fi # docker pull 실패 시 중단

            if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
                docker stop $CONTAINER_NAME && docker rm $CONTAINER_NAME
            fi

            echo "서울 EC2에 새 컨테이너 시작..."
            docker run -d \
              -p 3000:3000 \
              -e "OPENWEATHERMAP_API_KEY=${{ secrets.OPENWEATHERMAP_API_KEY_SECRET }}" \
              -e "Maps_API_KEY=${{ secrets.MAPS_API_KEY_SECRET }}" \
              -e "DB_HOST=${{ secrets.DB_HOST_SEOUL }}" \
              -e "DB_USER=${{ secrets.DB_USER_SEOUL }}" \
              -e "DB_PASSWORD=${{ secrets.DB_PASSWORD_SEOUL }}" \
              -e "DB_NAME=${{ secrets.DB_NAME_SEOUL }}" \
              -e "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" \
              --restart always \
              --name $CONTAINER_NAME \
              $IMAGE_URI
            if [ $? -ne 0 ]; then echo "docker run 실패!"; exit 1; fi # docker run 실패 시 중단
            
            docker image prune -af || true
            echo "✅ 서울 EC2 배포 완료!"
            docker ps -f name=$CONTAINER_NAME

  deploy-to-ec2-tokyo:
    name: Deploy to EC2 (Tokyo)
    runs-on: ubuntu-latest
    needs: build-and-push-to-ecr
    steps:
      - name: 🐞 Debug Tokyo Variables
        run: |
          echo "Tokyo EC2 Host: ${{ secrets.EC2_HOST_TOKYO }}"
          echo "ECR Registry from needs: [${{ needs.build-and-push-to-ecr.outputs.built_ecr_registry }}]"
          echo "ECR Repository from needs: [${{ needs.build-and-push-to-ecr.outputs.built_ecr_repository }}]"
          echo "Image Tag from needs: [${{ needs.build-and-push-to-ecr.outputs.built_image_tag }}]"

      - name: 🚚 Deploy to Tokyo EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST_TOKYO }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            ECR_REGISTRY_VAL="${{ needs.build-and-push-to-ecr.outputs.built_ecr_registry }}"
            ECR_REPOSITORY_VAL="${{ needs.build-and-push-to-ecr.outputs.built_ecr_repository }}"
            IMAGE_TAG_VAL="${{ needs.build-and-push-to-ecr.outputs.built_image_tag }}"

            if [ -z "$ECR_REGISTRY_VAL" ] || [ -z "$ECR_REPOSITORY_VAL" ] || [ -z "$IMAGE_TAG_VAL" ]; then
              echo "오류: ECR 이미지 정보를 제대로 전달받지 못했습니다."
              echo "ECR_REGISTRY_VAL: [$ECR_REGISTRY_VAL]"
              echo "ECR_REPOSITORY_VAL: [$ECR_REPOSITORY_VAL]"
              echo "IMAGE_TAG_VAL: [$IMAGE_TAG_VAL]"
              exit 1
            fi

            IMAGE_URI="$ECR_REGISTRY_VAL/$ECR_REPOSITORY_VAL:$IMAGE_TAG_VAL"
            CONTAINER_NAME="my-running-app-tokyo"

            echo "배포할 새로운 이미지 URI: $IMAGE_URI"
            docker pull $IMAGE_URI
            if [ $? -ne 0 ]; then echo "docker pull 실패!"; exit 1; fi

            if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
                docker stop $CONTAINER_NAME && docker rm $CONTAINER_NAME
            fi
            echo "도쿄 EC2에 새 컨테이너 시작..."
            docker run -d \
              -p 3000:3000 \
              -e "OPENWEATHERMAP_API_KEY=${{ secrets.OPENWEATHERMAP_API_KEY_SECRET }}" \
              -e "Maps_API_KEY=${{ secrets.MAPS_API_KEY_SECRET }}" \
              -e "DB_HOST=${{ secrets.DB_HOST_TOKYO }}" \
              -e "DB_USER=${{ secrets.DB_USER_TOKYO }}" \
              -e "DB_PASSWORD=${{ secrets.DB_PASSWORD_TOKYO }}" \
              -e "DB_NAME=${{ secrets.DB_NAME_TOKYO }}" \
              -e "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" \
              --restart always \
              --name $CONTAINER_NAME \
              $IMAGE_URI
            if [ $? -ne 0 ]; then echo "docker run 실패!"; exit 1; fi
            
            docker image prune -af || true
            echo "✅ 도쿄 EC2 배포 완료!"
            docker ps -f name=$CONTAINER_NAME
