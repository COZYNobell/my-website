name: Full CI/CD Pipeline with Terraform and EKS

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform: apply or destroy'
        required: true
        default: 'apply'

jobs:
  # 1단계: Terraform으로 인프라(VPC, EKS, RDS, IAM) 생성 또는 파기
  provision-infra:
    name: 'Phase 1: Provision Infrastructure with Terraform'
    runs-on: ubuntu-latest
    permissions:
      id-token: write # OIDC 인증을 위해 필요
      contents: read
    outputs:
      # 다음 작업을 위해 Terraform 출력값을 전달합니다.
      rds_endpoint: ${{ steps.apply.outputs.rds_endpoint }}
      db_name: ${{ steps.apply.outputs.db_name }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
        aws-region: ap-northeast-2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      run: terraform -chdir=terraform init

    - name: Terraform Apply
      id: apply
      # apply 또는 push 이벤트일 때만 실행합니다.
      if: github.event.inputs.action == 'apply' || github.event_name == 'push'
      run: |
        # -json 옵션으로 출력을 JSON 형식으로 받아, jq로 파싱하여 다음 단계에 전달
        terraform -chdir=terraform apply -auto-approve -json \
          -var="db_password=${{ secrets.DB_PASSWORD_SEOUL }}" | tee apply.json
        
        # Terraform 출력값을 GitHub Actions 출력 변수로 설정
        echo "rds_endpoint=$(jq -r '.outputs.rds_endpoint.value' apply.json)" >> $GITHUB_OUTPUT
        echo "db_name=$(jq -r '.outputs.db_name.value' apply.json)" >> $GITHUB_OUTPUT

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: terraform -chdir=terraform destroy -auto-approve -no-color -var="db_password=${{ secrets.DB_PASSWORD_SEOUL }}"
      
  # 2단계: 생성된 EKS 클러스터에 앱 및 모니터링 배포
  deploy-to-eks:
    name: 'Phase 2: Build and Deploy Apps to EKS'
    runs-on: ubuntu-latest
    needs: [provision-infra] # 인프라 생성이 성공해야만 실행
    if: success() && (github.event.inputs.action == 'apply' || github.event_name == 'push')
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
        aws-region: ap-northeast-2
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Build and Push Docker Image
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: my-node-app
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push --all-tags $ECR_REGISTRY/$ECR_REPOSITORY
    
    - name: Install Utilities (kubectl, helm)
      run: |
        # kubectl 설치
        curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.28.5/2024-01-04/bin/linux/amd64/kubectl
        chmod +x ./kubectl && sudo mv ./kubectl /usr/local/bin/
        # Helm 설치
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        chmod 700 get_helm.sh && ./get_helm.sh

    - name: Update kubeconfig to connect to cluster
      run: aws eks update-kubeconfig --region ap-northeast-2 --name my-weather-app-cluster

    - name: Deploy Kubernetes Addons
      run: |
        # Monitoring Stack 배포
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo update
        kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
        helm upgrade --install prometheus-stack prometheus-community/kube-prometheus-stack --namespace monitoring --wait
        
        # AWS Load Balancer Controller 배포
        helm repo add eks https://aws.github.io/eks-charts
        helm repo update
        eksctl create iamserviceaccount \
          --cluster=my-weather-app-cluster \
          --namespace=kube-system \
          --name=aws-load-balancer-controller \
          --attach-policy-arn=arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:policy/AWSLoadBalancerControllerIAMPolicy \
          --override-existing-serviceaccounts \
          --approve
        helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=my-weather-app-cluster --set serviceAccount.create=false --set serviceAccount.name=aws-load-balancer-controller --wait

    - name: Create Kubernetes Secrets for Application
      run: |
        kubectl create namespace weather-app --dry-run=client -o yaml | kubectl apply -f -
        kubectl create secret generic app-secrets -n weather-app \
          --from-literal=DB_HOST=${{ needs.provision-infra.outputs.db_host }} \
          --from-literal=DB_USER="admin" \
          --from-literal=DB_PASSWORD=${{ secrets.DB_PASSWORD_SEOUL }} \
          --from-literal=DB_NAME=${{ needs.provision-infra.outputs.db_name }} \
          --from-literal=SESSION_SECRET=${{ secrets.SESSION_SECRET }} \
          --from-literal=OPENWEATHERMAP_API_KEY=${{ secrets.OPENWEATHERMAP_API_KEY_SECRET }} \
          --from-literal=MAPS_API_KEY=${{ secrets.MAPS_API_KEY_SECRET }} \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy Weather Application Manifests
      run: kubectl apply -f k8s/
