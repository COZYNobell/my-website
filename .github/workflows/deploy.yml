name: Build and Deploy Docker Image to EC2 (via ECR)

on:
  push:
    branches:
      - main

jobs:
  build-and-push-to-ecr:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.build-image.outputs.image_uri }}
    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4
      - name: ⚙️ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }} # ECR이 있는 리전
      - name: 🏷️ Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: 🏗️ Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: my-node-app # ✨ 실제 ECR 리포지토리 이름
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-to-ec2-seoul:
    name: Deploy to EC2 (Seoul)
    runs-on: ubuntu-latest
    needs: build-and-push-to-ecr
    steps:
      - name: ⚙️ Configure AWS credentials (for ECR login on EC2 if needed)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2 # 서울 리전

      # ✨✨✨ NEW: 디버깅을 위한 Secret 값 출력 (서울) - 테스트 후 반드시 제거! ✨✨✨
      - name: 🐞 Debug Seoul EC2 Host Secret
        run: |
          echo "Attempting to deploy to Seoul..."
          echo "EC2_HOST_SEOUL Secret Value is: ${{ secrets.EC2_HOST_SEOUL }}"
          echo "EC2_USERNAME Secret Value is: ${{ secrets.EC2_USERNAME }}"
          # EC2_SSH_KEY는 너무 길고 민감하므로 직접 출력하지 않고 존재 여부만 확인합니다.
          echo "EC2_SSH_KEY Secret Exists: ${{ secrets.EC2_SSH_KEY != '' }}"
      # ✨✨✨ 디버깅 단계 끝 ✨✨✨

      - name: 🚚 Deploy to Seoul EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST_SEOUL }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "ECR 로그인 (서울)..."
            aws ecr get-login-password --region ap-northeast-2 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com

            IMAGE_URI="${{ needs.build-and-push-to-ecr.outputs.image_uri }}"
            CONTAINER_NAME="my-running-app-seoul"

            echo "배포할 이미지 URI: $IMAGE_URI"
            docker pull $IMAGE_URI
            if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
                docker stop $CONTAINER_NAME
                docker rm $CONTAINER_NAME
            else
                echo "실행 중인 $CONTAINER_NAME 컨테이너가 없습니다."
            fi
            echo "서울 EC2에 새 컨테이너 시작..."
            docker run -d \
              -p 3000:3000 \
              -e "OPENWEATHERMAP_API_KEY=${{ secrets.OPENWEATHERMAP_API_KEY_SECRET }}" \
              -e "Maps_API_KEY=${{ secrets.MAPS_API_KEY_SECRET }}" \
              -e "DB_HOST=${{ secrets.DB_HOST_SEOUL }}" \
              -e "DB_USER=${{ secrets.DB_USER_SEOUL }}" \
              -e "DB_PASSWORD=${{ secrets.DB_PASSWORD_SEOUL }}" \
              -e "DB_NAME=${{ secrets.DB_NAME_SEOUL }}" \
              -e "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" \
              --restart always \
              --name $CONTAINER_NAME \
              $IMAGE_URI
            docker image prune -af || true
            echo "✅ 서울 EC2 배포 완료!"

  deploy-to-ec2-tokyo:
    name: Deploy to EC2 (Tokyo)
    runs-on: ubuntu-latest
    needs: build-and-push-to-ecr
    steps:
      - name: ⚙️ Configure AWS credentials (for ECR login on EC2 if needed)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1 # 도쿄 리전

      # ✨✨✨ NEW: 디버깅을 위한 Secret 값 출력 (도쿄) - 테스트 후 반드시 제거! ✨✨✨
      - name: 🐞 Debug Tokyo EC2 Host Secret
        run: |
          echo "Attempting to deploy to Tokyo..."
          echo "EC2_HOST_TOKYO Secret Value is: ${{ secrets.EC2_HOST_TOKYO }}"
          echo "EC2_USERNAME Secret Value is: ${{ secrets.EC2_USERNAME }}"
          echo "EC2_SSH_KEY Secret Exists: ${{ secrets.EC2_SSH_KEY != '' }}"
      # ✨✨✨ 디버깅 단계 끝 ✨✨✨

      - name: 🚚 Deploy to Tokyo EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST_TOKYO }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "ECR 로그인 (도쿄)..."
            aws ecr get-login-password --region ap-northeast-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com

            IMAGE_URI="${{ needs.build-and-push-to-ecr.outputs.image_uri }}"
            CONTAINER_NAME="my-running-app-tokyo"

            echo "배포할 이미지 URI: $IMAGE_URI"
            docker pull $IMAGE_URI
            if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
                docker stop $CONTAINER_NAME
                docker rm $CONTAINER_NAME
            else
                echo "실행 중인 $CONTAINER_NAME 컨테이너가 없습니다."
            fi
            echo "도쿄 EC2에 새 컨테이너 시작..."
            docker run -d \
              -p 3000:3000 \
              -e "OPENWEATHERMAP_API_KEY=${{ secrets.OPENWEATHERMAP_API_KEY_SECRET }}" \
              -e "Maps_API_KEY=${{ secrets.MAPS_API_KEY_SECRET }}" \
              -e "DB_HOST=${{ secrets.DB_HOST_TOKYO }}" \
              -e "DB_USER=${{ secrets.DB_USER_TOKYO }}" \
              -e "DB_PASSWORD=${{ secrets.DB_PASSWORD_TOKYO }}" \
              -e "DB_NAME=${{ secrets.DB_NAME_TOKYO }}" \
              -e "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" \
              --restart always \
              --name $CONTAINER_NAME \
              $IMAGE_URI
            docker image prune -af || true
            echo "✅ 도쿄 EC2 배포 완료!"
