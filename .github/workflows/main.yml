# 📄 파일명: main.yml
# ✅ 버전: v3 (정보 전달 오류 수정)
# ✅ 설명: provision-servers 작업이 이미지 URI를 후속 배포 작업에 전달하도록 수정했습니다.
# 🕒 날짜: 2025-06-23

name: Deploy App and Monitoring to Multi-Region EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # 1단계: Docker 이미지 빌드 및 푸시 (변경 없음)
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.build-image.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: my-node-app
          IMAGE_TAG: latest
        run: |
          IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT

  # 2단계: Ansible 프로비저닝 (모든 서버 대상)
  provision-servers:
    name: Provision All EC2 Instances with Ansible
    runs-on: ubuntu-latest
    needs: build-and-push
    # ✨ 추가된 부분: build-and-push 작업의 결과물을 받아, 다음 작업에 전달합니다.
    outputs:
      image_uri: ${{ needs.build-and-push.outputs.image_uri }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_DEPLOY_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
      - name: Run Ansible Playbooks
        run: |
          sudo apt-get update && sudo apt-get install -y ansible
          ansible-playbook -i ansible/inventory.ini --private-key ~/.ssh/deploy_key ansible/setup-ec2-base.yaml --ssh-common-args='-o StrictHostKeyChecking=no' --verbose
          ansible-playbook -i ansible/inventory.ini --private-key ~/.ssh/deploy_key ansible/setup-monitoring.yaml --ssh-common-args='-o StrictHostKeyChecking=no' --verbose

  # 3-1단계: 서울 리전에 애플리케이션 배포
  deploy-to-seoul:
    name: Deploy App to EC2 (Seoul)
    runs-on: ubuntu-latest
    needs: provision-servers
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - name: Deploy Application Container to Seoul EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST_SEOUL }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_DEPLOY_KEY }}
          script: |
            CONTAINER_NAME="seoul-app-prod"
            # ✨ 수정된 부분: 바로 이전 작업인 provision-servers의 결과물을 참조합니다.
            IMAGE_URI="${{ needs.provision-servers.outputs.image_uri }}"

            aws ecr get-login-password --region ap-northeast-2 | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com
            
            sudo docker pull $IMAGE_URI
            if [ "$(sudo docker ps -q -f name=$CONTAINER_NAME)" ]; then sudo docker stop $CONTAINER_NAME; fi
            if [ "$(sudo docker ps -aq -f name=$CONTAINER_NAME)" ]; then sudo docker rm $CONTAINER_NAME; fi
            
            sudo docker run -d -p 80:3000 --name $CONTAINER_NAME --restart always \
              -e NODE_ENV="production" \
              -e DB_HOST="${{ secrets.DB_HOST_SEOUL }}" \
              -e DB_USER="${{ secrets.DB_USER_SEOUL }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD_SEOUL }}" \
              -e DB_NAME="${{ secrets.DB_NAME_SEOUL }}" \
              -e SESSION_SECRET="${{ secrets.SESSION_SECRET }}" \
              -e OPENWEATHERMAP_API_KEY_SECRET="${{ secrets.OPENWEATHERMAP_API_KEY_SECRET }}" \
              -e MAPS_API_KEY_SECRET="${{ secrets.MAPS_API_KEY_SECRET }}" \
              -e SNS_TOPIC_ARN="${{ secrets.SNS_TOPIC_ARN_SEOUL }}" \
              $IMAGE_URI
            
            echo "✅ Seoul EC2 deployment complete!"

  # 3-2단계: 도쿄 리전에 애플리케이션 배포
  deploy-to-tokyo:
    name: Deploy App to EC2 (Tokyo)
    runs-on: ubuntu-latest
    needs: provision-servers
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
      - name: Deploy Application Container to Tokyo EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST_TOKYO }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_DEPLOY_KEY }}
          script: |
            CONTAINER_NAME="tokyo-app-prod"
            # ✨ 수정된 부분: 바로 이전 작업인 provision-servers의 결과물을 참조합니다.
            IMAGE_URI="${{ needs.provision-servers.outputs.image_uri }}"

            # ECR은 서울에 있으므로, 도쿄 서버에서도 서울 ECR에 로그인합니다.
            aws ecr get-login-password --region ap-northeast-2 | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com
            
            sudo docker pull $IMAGE_URI
            
            if [ "$(sudo docker ps -q -f name=$CONTAINER_NAME)" ]; then sudo docker stop $CONTAINER_NAME; fi
            if [ "$(sudo docker ps -aq -f name=$CONTAINER_NAME)" ]; then sudo docker rm $CONTAINER_NAME; fi
            
            sudo docker run -d -p 80:3000 --name $CONTAINER_NAME --restart always \
              -e NODE_ENV="production" \
              -e DB_HOST="${{ secrets.DB_HOST_TOKYO }}" \
              -e DB_USER="${{ secrets.DB_USER_TOKYO }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD_TOKYO }}" \
              -e DB_NAME="${{ secrets.DB_NAME_TOKYO }}" \
              -e SESSION_SECRET="${{ secrets.SESSION_SECRET }}" \
              -e OPENWEATHERMAP_API_KEY_SECRET="${{ secrets.OPENWEATHERMAP_API_KEY_SECRET }}" \
              -e MAPS_API_KEY_SECRET="${{ secrets.MAPS_API_KEY_SECRET }}" \
              -e SNS_TOPIC_ARN="${{ secrets.SNS_TOPIC_ARN_TOKYO }}" \
              $IMAGE_URI
            
            echo "✅ Tokyo EC2 deployment complete!"
