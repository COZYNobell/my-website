# 📄 파일명: main.yml
# ✅ 버전: v2 (디버깅)
# ✅ 설명: 애플리케이션 배포 스크립트의 디버깅을 위해 컨테이너 실행 방식을 변경하고, 상세 로그를 출력하도록 수정했습니다.
# 🕒 날짜: 2025-06-23

name: Deploy App and Monitoring to Multi-Region EC2 (Debug Mode)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # 1단계: Docker 이미지 빌드 및 푸시 (변경 없음)
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.build-image.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: my-node-app
          IMAGE_TAG: latest
        run: |
          IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT

  # 2단계: Ansible 프로비저닝 (변경 없음)
  provision-servers:
    name: Provision All EC2 Instances with Ansible
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_DEPLOY_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
      - name: Run Ansible Playbooks
        run: |
          sudo apt-get update && sudo apt-get install -y ansible
          echo "Running Base Setup Playbook on all servers..."
          ansible-playbook -i ansible/inventory.ini --private-key ~/.ssh/deploy_key ansible/setup-ec2-base.yaml --ssh-common-args='-o StrictHostKeyChecking=no' --verbose
          echo "Running Monitoring Setup Playbook on monitoring server..."
          ansible-playbook -i ansible/inventory.ini --private-key ~/.ssh/deploy_key ansible/setup-monitoring.yaml --ssh-common-args='-o StrictHostKeyChecking=no' --verbose

  # 3-1단계: 서울 리전에 애플리케이션 배포 (디버깅 모드)
  deploy-to-seoul:
    name: Deploy App to EC2 (Seoul)
    runs-on: ubuntu-latest
    needs: provision-servers
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2
      - name: Deploy and Debug Application Container (Seoul)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST_SEOUL }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_DEPLOY_KEY }}
          script: |
            set -e
            CONTAINER_NAME="seoul-app-prod"
            IMAGE_URI="${{ needs.build-and-push.outputs.image_uri }}"
            
            echo "--- ECR Login (Seoul) ---"
            aws ecr get-login-password --region ap-northeast-2 | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com
            
            echo "--- Pulling latest image ---"
            sudo docker pull $IMAGE_URI

            echo "--- Stopping and removing old container ---"
            if [ "$(sudo docker ps -q -f name=$CONTAINER_NAME)" ]; then sudo docker stop $CONTAINER_NAME; fi
            if [ "$(sudo docker ps -aq -f name=$CONTAINER_NAME)" ]; then sudo docker rm $CONTAINER_NAME; fi
            
            echo "--- Starting container in foreground for debugging ---"
            # -d 플래그를 제거하여 포그라운드에서 실행하고, || true를 추가하여 컨테이너가 오류로 종료되어도 워크플로우가 실패하지 않도록 합니다.
            sudo docker run --name $CONTAINER_NAME -p 80:3000 \
              -e NODE_ENV="production" \
              -e DB_HOST="${{ secrets.DB_HOST_SEOUL }}" \
              -e DB_USER="${{ secrets.DB_USER_SEOUL }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD_SEOUL }}" \
              -e DB_NAME="${{ secrets.DB_NAME_SEOUL }}" \
              -e SESSION_SECRET="${{ secrets.SESSION_SECRET }}" \
              -e OPENWEATHERMAP_API_KEY_SECRET="${{ secrets.OPENWEATHERMAP_API_KEY_SECRET }}" \
              -e MAPS_API_KEY_SECRET="${{ secrets.MAPS_API_KEY_SECRET }}" \
              -e SNS_TOPIC_ARN="${{ secrets.SNS_TOPIC_ARN_SEOUL }}" \
              $IMAGE_URI || true

            echo "--- Capturing container logs ---"
            # 잠시 기다린 후 로그를 캡처합니다.
            sleep 5
            sudo docker logs $CONTAINER_NAME

  # ✨ 3-2단계: 도쿄 리전에 애플리케이션 배포 (디버깅 모드) ✨
  deploy-to-tokyo:
    name: Deploy App to EC2 (Tokyo)
    runs-on: ubuntu-latest
    needs: provision-servers
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-1
      - name: Deploy and Debug Application Container (Tokyo)
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST_TOKYO }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_DEPLOY_KEY }}
          script: |
            # 서울 배포 스크립트와 동일한 디버깅 로직 적용
            set -e
            CONTAINER_NAME="tokyo-app-prod"
            IMAGE_URI="${{ needs.build-and-push.outputs.image_uri }}"
            
            echo "--- ECR Login (Tokyo, for Seoul ECR) ---"
            aws ecr get-login-password --region ap-northeast-2 | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com

            echo "--- Pulling latest image ---"
            sudo docker pull $IMAGE_URI

            echo "--- Stopping and removing old container ---"
            if [ "$(sudo docker ps -q -f name=$CONTAINER_NAME)" ]; then sudo docker stop $CONTAINER_NAME; fi
            if [ "$(sudo docker ps -aq -f name=$CONTAINER_NAME)" ]; then sudo docker rm $CONTAINER_NAME; fi
            
            echo "--- Starting container in foreground for debugging ---"
            sudo docker run --name $CONTAINER_NAME -p 80:3000 \
              -e NODE_ENV="production" \
              -e DB_HOST="${{ secrets.DB_HOST_TOKYO }}" \
              -e DB_USER="${{ secrets.DB_USER_TOKYO }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD_TOKYO }}" \
              -e DB_NAME="${{ secrets.DB_NAME_TOKYO }}" \
              -e SESSION_SECRET="${{ secrets.SESSION_SECRET }}" \
              -e OPENWEATHERMAP_API_KEY_SECRET="${{ secrets.OPENWEATHERMAP_API_KEY_SECRET }}" \
              -e MAPS_API_KEY_SECRET="${{ secrets.MAPS_API_KEY_SECRET }}" \
              -e SNS_TOPIC_ARN="${{ secrets.SNS_TOPIC_ARN_TOKYO }}" \
              $IMAGE_URI || true

            echo "--- Capturing container logs ---"
            sleep 5
            sudo docker logs $CONTAINER_NAME
