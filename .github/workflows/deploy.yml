name: Build and Deploy Docker Image to Multi-Region EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-push-to-ecr: # ⭐ 이 작업의 마지막 스텝(run 스크립트)이 수정됩니다! ⭐
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    outputs:
      built_ecr_repository: my-node-app # 메이슨님의 실제 ECR 리포지토리 이름
      built_image_tag: ${{ github.sha }} # outputs은 계속 SHA 태그를 사용합니다.

    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }} # ECR 리포지토리가 있는 주 리전 (예: ap-northeast-2)

      - name: 🏷️ Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🏗️ Build, tag, and push image to Amazon ECR # 이 스텝의 env와 run 부분이 수정됩니다.
        env:
          ECR_REGISTRY_URL: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_NAME: my-node-app # 메이슨님의 실제 ECR 리포지토리 이름
          IMAGE_TAG_SHA: ${{ github.sha }}    # 기존 SHA 태그용 변수
          IMAGE_TAG_LATEST: latest          # 새로 추가할 'latest' 태그용 변수
        run: |
          echo "Building image for ECR Registry: $ECR_REGISTRY_URL"
          echo "Target Repository: $ECR_REPOSITORY_NAME"
          echo "Image Tag SHA: $IMAGE_TAG_SHA"
          echo "Image Tag Latest: $IMAGE_TAG_LATEST"
          
          # 이미지를 빌드하면서 두 개의 태그를 한 번에 지정합니다: SHA 태그와 latest 태그
          docker build -t $ECR_REGISTRY_URL/$ECR_REPOSITORY_NAME:$IMAGE_TAG_SHA -t $ECR_REGISTRY_URL/$ECR_REPOSITORY_NAME:$IMAGE_TAG_LATEST .
          
          # 두 개의 태그를 모두 ECR로 푸시합니다.
          docker push $ECR_REGISTRY_URL/$ECR_REPOSITORY_NAME:$IMAGE_TAG_SHA
          docker push $ECR_REGISTRY_URL/$ECR_REPOSITORY_NAME:$IMAGE_TAG_LATEST
          
          echo "Image pushed to ECR (SHA): $ECR_REGISTRY_URL/$ECR_REPOSITORY_NAME:$IMAGE_TAG_SHA"
          echo "Image pushed to ECR (Latest): $ECR_REGISTRY_URL/$ECR_REPOSITORY_NAME:$IMAGE_TAG_LATEST"

  deploy-to-ec2-seoul: # 이 작업은 메이슨님 기존 내용과 제가 이전에 드린 상세 스크립트 버전을 사용합니다.
    name: Deploy to EC2 (Seoul)
    runs-on: ubuntu-latest
    needs: build-and-push-to-ecr
    
    steps:
      - name: 🐞 Debug Seoul Variables 
        run: |
          echo "Seoul EC2 Host: ${{ secrets.EC2_HOST_SEOUL }}"
          echo "AWS Account ID for ECR: ${{ secrets.AWS_ACCOUNT_ID }}"
          echo "ECR Repository from needs: [${{ needs.build-and-push-to-ecr.outputs.built_ecr_repository }}]"
          echo "Image Tag from needs: [${{ needs.build-and-push-to-ecr.outputs.built_image_tag }}]" # 여기서는 SHA 태그를 참조
      
      - name: 🚚 Deploy to Seoul EC2 instance
        uses: appleboy/ssh-action@v1.0.3 
        with:
          host: ${{ secrets.EC2_HOST_SEOUL }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: | 
            echo "서울 EC2 배포 스크립트 시작 (`date`)"
            set -e 

            AWS_ACCOUNT_ID_IN_SCRIPT="${{ secrets.AWS_ACCOUNT_ID }}" 
            AWS_DEFAULT_REGION_IN_SCRIPT="ap-northeast-2" 

            ECR_REPOSITORY_FROM_BUILD_IN_SCRIPT="${{ needs.build-and-push-to-ecr.outputs.built_ecr_repository }}"
            # 배포 시에는 'latest' 태그를 사용하거나, needs에서 받은 SHA 태그를 사용할 수 있습니다.
            # 여기서는 GitHub Actions 빌드에서 'latest'도 푸시했으므로 'latest'를 사용해봅니다.
            # 만약 특정 버전을 배포하고 싶다면 IMAGE_TAG_FROM_BUILD_IN_SCRIPT (SHA 태그)를 사용해도 됩니다.
            IMAGE_TAG_TO_DEPLOY="latest" # 또는 ${{ needs.build-and-push-to-ecr.outputs.built_image_tag }}

            ECR_REGISTRY_URL_SEOUL_IN_SCRIPT="${AWS_ACCOUNT_ID_IN_SCRIPT}.dkr.ecr.${AWS_DEFAULT_REGION_IN_SCRIPT}.amazonaws.com"
            IMAGE_URI_IN_SCRIPT="${ECR_REGISTRY_URL_SEOUL_IN_SCRIPT}/${ECR_REPOSITORY_FROM_BUILD_IN_SCRIPT}:${IMAGE_TAG_TO_DEPLOY}"
            
            CONTAINER_NAME_IN_SCRIPT="my-running-app-seoul"

            echo "배포 대상 이미지: ${IMAGE_URI_IN_SCRIPT}"
            echo "사용할 컨테이너 이름: ${CONTAINER_NAME_IN_SCRIPT}"

            echo "AWS ECR에 로그인합니다 (${AWS_DEFAULT_REGION_IN_SCRIPT})..."
            aws ecr get-login-password --region ${AWS_DEFAULT_REGION_IN_SCRIPT} | sudo docker login --username AWS --password-stdin ${ECR_REGISTRY_URL_SEOUL_IN_SCRIPT}
            echo "ECR 로그인 성공."

            echo "최신 이미지를 Pull합니다: ${IMAGE_URI_IN_SCRIPT}"
            sudo docker pull ${IMAGE_URI_IN_SCRIPT}
            if [ $? -ne 0 ]; then echo "!!! docker pull 실패! (서울)"; exit 1; fi
            echo "이미지 Pull 완료."

            echo "기존 '${CONTAINER_NAME_IN_SCRIPT}' 컨테이너를 확인하고 중지/삭제합니다..."
            if [ "$(sudo docker ps -q -f name=^/${CONTAINER_NAME_IN_SCRIPT}$)" ]; then 
                echo "실행 중인 '${CONTAINER_NAME_IN_SCRIPT}' 컨테이너를 중지합니다."
                sudo docker stop ${CONTAINER_NAME_IN_SCRIPT}
            else
                echo "실행 중인 '${CONTAINER_NAME_IN_SCRIPT}' 컨테이너가 없습니다."
            fi

            if [ "$(sudo docker ps -aq -f name=^/${CONTAINER_NAME_IN_SCRIPT}$)" ]; then
                echo "기존 '${CONTAINER_NAME_IN_SCRIPT}' 컨테이너를 삭제합니다."
                sudo docker rm ${CONTAINER_NAME_IN_SCRIPT}
            else
                echo "삭제할 기존 '${CONTAINER_NAME_IN_SCRIPT}' 컨테이너가 없습니다."
            fi
            echo "기존 컨테이너 처리 완료."

            echo "새로운 '${CONTAINER_NAME_IN_SCRIPT}' 컨테이너를 실행합니다..."
            sudo docker run -d \
              -p 80:3000 \
              --name ${CONTAINER_NAME_IN_SCRIPT} \
              --restart always \
              -e NODE_ENV="production" \
              -e DB_HOST="${{ secrets.DB_HOST_SEOUL }}" \
              -e DB_USER="${{ secrets.DB_USER_SEOUL }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD_SEOUL }}" \
              -e DB_NAME="${{ secrets.DB_NAME_SEOUL }}" \
              -e SESSION_SECRET="${{ secrets.SESSION_SECRET }}" \
              -e OPENWEATHERMAP_API_KEY="${{ secrets.OPENWEATHERMAP_API_KEY_SECRET }}" \
              -e Maps_API_KEY="${{ secrets.MAPS_API_KEY_SECRET }}" \
              ${IMAGE_URI_IN_SCRIPT}
            if [ $? -ne 0 ]; then echo "!!! docker run 실패! (서울)"; exit 1; fi
            echo "새로운 컨테이너 실행 요청 완료."

            echo "불필요한 Docker 이미지를 정리합니다..."
            sudo docker image prune -af || true 
            echo "이미지 정리 완료."
            
            echo "잠시 후 '${CONTAINER_NAME_IN_SCRIPT}' 컨테이너 상태를 확인합니다..."
            sleep 5 
            sudo docker ps -f name=^/${CONTAINER_NAME_IN_SCRIPT}$
            echo "'${CONTAINER_NAME_IN_SCRIPT}' 컨테이너의 최근 로그 일부:"
            sudo docker logs --tail 20 ${CONTAINER_NAME_IN_SCRIPT}

            echo "✅ 서울 EC2 배포 완료! (`date`)"

  deploy-to-ec2-tokyo: # 이 작업은 메이슨님 기존 내용 그대로 사용합니다. (도쿄는 제작 중)
    name: Deploy to EC2 (Tokyo)
    runs-on: ubuntu-latest
    needs: build-and-push-to-ecr
    steps:
      - name: 🐞 Debug Tokyo Variables
        run: |
          echo "Tokyo EC2 Host: ${{ secrets.EC2_HOST_TOKYO }}"
          echo "AWS Account ID for ECR: ${{ secrets.AWS_ACCOUNT_ID }}"
          echo "ECR Repository from needs: [${{ needs.build-and-push-to-ecr.outputs.built_ecr_repository }}]"
          echo "Image Tag from needs: [${{ needs.build-and-push-to-ecr.outputs.built_image_tag }}]"

      - name: 🚚 Deploy to Tokyo EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST_TOKYO }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            ECR_REGISTRY_URL_TOKYO="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com" 
            ECR_REPOSITORY_VAL="${{ needs.build-and-push-to-ecr.outputs.built_ecr_repository }}"
            IMAGE_TAG_VAL="${{ needs.build-and-push-to-ecr.outputs.built_image_tag }}" # 여기서는 SHA 태그 사용

            if [ -z "$ECR_REGISTRY_URL_TOKYO" ] || [ -z "$ECR_REPOSITORY_VAL" ] || [ -z "$IMAGE_TAG_VAL" ] || [ "${{ secrets.AWS_ACCOUNT_ID }}" == "" ]; then
              echo "오류: ECR 이미지 정보를 구성하는 데 필요한 값이 누락되었습니다 (도쿄)."
              exit 1
            fi

            IMAGE_URI="$ECR_REGISTRY_URL_TOKYO/$ECR_REPOSITORY_VAL:$IMAGE_TAG_VAL"
            CONTAINER_NAME="my-running-app-tokyo"
            
            echo "배포할 새로운 이미지 URI (도쿄): $IMAGE_URI"
            echo "✅ 도쿄 EC2 배포 작업은 현재 준비 중입니다 (실제 배포는 주석 처리됨)."
