name: Provision and Deploy to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # 1단계: Docker 이미지 빌드 및 푸시
  build-and-push:
<<<<<<< HEAD
    name: Build and Push Docker Image
=======
    name: Build Docker Image
>>>>>>> 985c348e98ec82998da7a5f31399304d4332bbbe
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.build-image.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2 
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: my-node-app
          IMAGE_TAG: latest
        run: |
          IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT

  # 2단계: Ansible 프로비저닝 및 앱 배포
  provision-and-deploy:
    name: Provision EC2 and Deploy App
    runs-on: ubuntu-latest
<<<<<<< HEAD
    # ✨ 'build'를 올바른 작업 이름인 'build-and-push'로 수정했습니다.
    needs: build-and-push 
=======
    needs: build-and-push # ✨ 'build'를 올바른 작업 이름인 'build-and-push'로 수정!
>>>>>>> 985c348e98ec82998da7a5f31399304d4332bbbe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_DEPLOY_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

      - name: Run Ansible Playbooks
        run: |
<<<<<<< HEAD
          # ✨ GitHub Actions 실행기에 Ansible을 설치하는 단계를 추가했습니다.
          sudo apt-get update && sudo apt-get install -y ansible
          
          # ✨ --ssh-common-args를 사용하여 호스트 키 검증을 비활성화합니다.
=======
          sudo apt-get update && sudo apt-get install -y ansible
>>>>>>> 985c348e98ec82998da7a5f31399304d4332bbbe
          ansible-playbook -i ansible/inventory.ini --private-key ~/.ssh/deploy_key ansible/setup-ec2-base.yaml --ssh-common-args='-o StrictHostKeyChecking=no' --verbose
          ansible-playbook -i ansible/inventory.ini --private-key ~/.ssh/deploy_key ansible/setup-monitoring.yaml --ssh-common-args='-o StrictHostKeyChecking=no' --verbose

      - name: Deploy Application Container
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST_SEOUL }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_DEPLOY_KEY }}
          script: |
            CONTAINER_NAME="seoul-app-prod"
<<<<<<< HEAD
            # ✨ 의존하는 작업 이름(needs)을 'build-and-push'로 올바르게 수정했습니다.
=======
>>>>>>> 985c348e98ec82998da7a5f31399304d4332bbbe
            IMAGE_URI="${{ needs.build-and-push.outputs.image_uri }}"

            aws ecr get-login-password --region ap-northeast-2 | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com
            
            sudo docker pull $IMAGE_URI
            if [ "$(sudo docker ps -q -f name=$CONTAINER_NAME)" ]; then sudo docker stop $CONTAINER_NAME; fi
            if [ "$(sudo docker ps -aq -f name=$CONTAINER_NAME)" ]; then sudo docker rm $CONTAINER_NAME; fi
            
            sudo docker run -d -p 80:3000 --name $CONTAINER_NAME --restart always \
              -e NODE_ENV="production" \
              -e DB_HOST="${{ secrets.DB_HOST_SEOUL }}" \
              -e DB_USER="${{ secrets.DB_USER_SEOUL }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD_SEOUL }}" \
              -e DB_NAME="${{ secrets.DB_NAME_SEOUL }}" \
              -e SESSION_SECRET="${{ secrets.SESSION_SECRET }}" \
              -e OPENWEATHERMAP_API_KEY_SECRET="${{ secrets.OPENWEATHERMAP_API_KEY_SECRET }}" \
              -e MAPS_API_KEY_SECRET="${{ secrets.MAPS_API_KEY_SECRET }}" \
              -e SNS_TOPIC_ARN="${{ secrets.SNS_TOPIC_ARN }}" \
              $IMAGE_URI
            
            echo "✅ Seoul EC2 deployment complete!"
            sudo docker logs --tail 50 $CONTAINER_NAME
