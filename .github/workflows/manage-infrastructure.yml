name: Manage EKS and Deploy Apps with Terraform

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - 'k8s/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform: apply or destroy'
        required: true
        default: 'apply'

jobs:
  # 1단계 작업: Terraform으로 인프라(EKS, RDS 등) 생성 또는 파기
  terraform:
    name: 'Terraform: Provision Infrastructure'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
        aws-region: ap-northeast-2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    # ✨ GitHub Actions Runner의 Public IP를 가져오는 스텝 추가 ✨
    - name: Get GitHub Runner IP
      id: runner_ip
      run: echo "ip=$(curl -s ifconfig.me)" >> $GITHUB_OUTPUT

    - name: Terraform Init
      run: terraform -chdir=terraform init

    - name: Terraform Apply
      id: apply
      # ✨ -var 옵션으로 Runner의 IP를 Terraform에 전달 ✨
      run: |
        terraform -chdir=terraform apply -auto-approve -no-color \
          -var="runner_ip=${{ steps.runner_ip.outputs.ip }}" \
          -var="db_password=${{ secrets.DB_PASSWORD_SEOUL }}"
      if: github.event.inputs.action == 'apply' || github.event_name == 'push'

    - name: Terraform Destroy
      run: |
        terraform -chdir=terraform destroy -auto-approve -no-color \
          -var="runner_ip=${{ steps.runner_ip.outputs.ip }}" \
          -var="db_password=${{ secrets.DB_PASSWORD_SEOUL }}"
      if: github.event.inputs.action == 'destroy'
      
  # 2단계 작업: 생성된 EKS 클러스터에 애플리케이션 및 모니터링 배포
  deploy-to-eks:
    name: 'Deploy Apps to EKS'
    runs-on: ubuntu-latest
    needs: [terraform]
    if: github.event.inputs.action == 'apply' || github.event_name == 'push'

    steps:
    # ... (이하 앱 배포 관련 스텝들은 이전과 동일하게 유지)
