name: Deploy Node.js App to EC2 (SSH) # 워크플로우 이름

on:
  push:
    branches:
      - main # 'main' 브랜치에 코드가 푸시될 때마다 실행

jobs:
  deploy: # 'deploy' 작업 정의
    name: Deploy to EC2 server # 작업 이름
    runs-on: ubuntu-latest # GitHub Actions 실행 환경

    steps: # 순차적으로 실행될 단계들
      - name: 🛎️ Checkout code from GitHub
        uses: actions/checkout@v4 # 코드 가져오기 액션

      - name: ⚙️ Setup Node.js environment
        uses: actions/setup-node@v4 # Node.js 환경 설정 액션
        with:
          node-version: '18' # EC2 서버에 설치한 Node.js 버전과 일치시키세요 (예: '18' 또는 '18.x')

      - name: 📦 Install dependencies
        run: npm ci # package-lock.json을 사용하여 의존성 패키지 설치

      # 프로젝트 빌드 과정이 필요하다면 여기에 추가합니다.
      # 예시: React, Vue 등의 프론트엔드 빌드
      # - name: 🏗️ Build project
      #   run: npm run build

      - name: 🚚 Deploy to EC2 server via SSH
        uses: appleboy/ssh-action@v1.0.3 # SSH 액션 (최신 버전 확인 권장)
        with:
          host: ${{ secrets.EC2_HOST }} # GitHub Secrets에서 EC2 호스트 주소 가져오기
          username: ${{ secrets.EC2_USERNAME }} # GitHub Secrets에서 EC2 사용자 이름 가져오기 (ec2-user)
          key: ${{ secrets.EC2_SSH_KEY }} # GitHub Secrets에서 SSH 비밀키 가져오기
          port: 22 # SSH 포트 (기본값)
          script: | # EC2 서버에서 실행될 명령어들
            # 1. 애플리케이션 디렉토리 설정
            APP_DIR="/home/${{ secrets.EC2_USERNAME }}/my-website" # 사용자 이름에 맞게 자동 설정
            echo "배포 디렉토리: $APP_DIR"

            # 2. 디렉토리 존재 여부 확인 및 코드 업데이트
            if [ ! -d "$APP_DIR" ]; then
              echo "배포 디렉토리가 없어 새로 clone 합니다: $APP_DIR"
              git clone https://github.com/${{ github.repository }}.git "$APP_DIR"
              cd "$APP_DIR"
            else
              echo "배포 디렉토리가 존재합니다. 최신 코드를 pull 합니다: $APP_DIR"
              cd "$APP_DIR"
              echo "현재 브랜치에서 변경사항 임시 저장 (git stash)"
              git stash push --include-untracked || true # stash 실패 시에도 계속 진행
              echo "원격 저장소에서 최신 코드 가져오기 (git pull origin main)"
              git pull origin main
              echo "임시 저장된 변경사항 다시 적용 시도 (git stash pop)"
              git stash pop || true # pop 실패 시 (충돌 등)에도 계속 진행
            fi

            echo "현재 작업 디렉토리: $(pwd)"
            echo "현재 브랜치 정보:"
            git branch

            echo "운영 환경용 의존성 패키지 설치 (npm ci --production)"
            npm ci --production # server.js 실행에 필요한 패키지만 설치

            echo "pm2로 애플리케이션 관리 (삭제 후 시작 및 상태 저장)"
            # 기존에 같은 이름으로 실행 중인 앱이 있다면 삭제 (없으면 그냥 넘어감)
            pm2 delete my-node-app || true
            # server.js를 'my-node-app'이라는 이름으로 pm2로 시작
            pm2 start server.js --name "my-node-app"
            # 현재 실행 중인 pm2 프로세스 목록을 저장 (서버 재부팅 시 자동 실행을 위해)
            pm2 save

            echo "✅ EC2 서버 배포 완료! pm2 list로 상태 확인:"
            pm2 list # 배포 마지막에 pm2 상태를 로그로 남김
