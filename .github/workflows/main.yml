name: Full CI/CD for NewNewAlpha

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - 'k8s/**'
      - 'server.js'
      - 'public/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform: apply or destroy'
        required: true
        default: 'apply'

jobs:
  provision-infra:
    name: 'Step 1: Provision Infra with Terraform'
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      rds_endpoint: ${{ steps.apply.outputs.rds_endpoint }}
      iam_role_arn: ${{ steps.apply.outputs.github_actions_role_arn }}
      db_name: ${{ steps.apply.outputs.db_name }}

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
        aws-region: ap-northeast-2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      run: terraform -chdir=terraform init

    - name: Terraform Apply
      id: apply
      if: github.event.inputs.action == 'apply' || github.event_name == 'push'
      run: |
        terraform -chdir=terraform apply -auto-approve -json -var="db_password=${{ secrets.DB_PASSWORD }}" | tee apply.json
        echo "rds_endpoint=$(jq -r '.outputs.seoul_rds_endpoint.value' apply.json)" >> $GITHUB_OUTPUT
        echo "db_name=$(jq -r '.outputs.db_name.value' apply.json)" >> $GITHUB_OUTPUT
        echo "github_actions_role_arn=$(jq -r '.outputs.github_actions_role_arn.value' apply.json)" >> $GITHUB_OUTPUT

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: terraform -chdir=terraform destroy -auto-approve -var="db_password=${{ secrets.DB_PASSWORD }}"

  deploy-to-eks:
    name: 'Step 2: Deploy Application to EKS'
    runs-on: ubuntu-latest
    needs: provision-infra
    if: success() && (github.event.inputs.action == 'apply' || github.event_name == 'push')
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ needs.provision-infra.outputs.iam_role_arn }}
        aws-region: ap-northeast-2

    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build and Push Docker Image
      run: |
        docker build -t ${{ steps.login-ecr.outputs.registry }}/my-node-app:${{ github.sha }} -t ${{ steps.login-ecr.outputs.registry }}/my-node-app:latest .
        docker push --all-tags ${{ steps.login-ecr.outputs.registry }}/my-node-app

    - name: Setup kubectl & helm
      run: |
        curl -LO "https://dl.k8s.io/release/v1.29.0/bin/linux/amd64/kubectl" && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 && chmod 700 get_helm.sh && ./get_helm.sh

    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region ap-northeast-2 --name my-weather-app-cluster

    - name: Deploy Secrets
      run: |
        kubectl create ns weather-app --dry-run=client -o yaml | kubectl apply -f -
        kubectl create secret generic app-secrets -n weather-app \
          --from-literal=DB_HOST=${{ needs.provision-infra.outputs.rds_endpoint }} \
          --from-literal=DB_USER="admin" \
          --from-literal=DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
          --from-literal=DB_NAME=${{ needs.provision-infra.outputs.db_name }} \
          --from-literal=SESSION_SECRET=${{ secrets.SESSION_SECRET }} \
          --from-literal=OPENWEATHERMAP_API_KEY=${{ secrets.OPENWEATHERMAP_API_KEY }} \
          --from-literal=MAPS_API_KEY=${{ secrets.MAPS_API_KEY }} \
          --dry-run=client -o yaml | kubectl apply -f -

    - name: Deploy App to EKS
      run: kubectl apply -f k8s/

    - name: Deploy Monitoring Stack (Prometheus + Grafana)
      run: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo update
        kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
        helm upgrade --install prometheus-stack prometheus-community/kube-prometheus-stack \
          --namespace monitoring --wait

    - name: Deploy AWS Load Balancer Controller
      run: |
        helm repo add eks https://aws.github.io/eks-charts
        helm repo update
        eksctl create iamserviceaccount \
          --cluster=my-weather-app-cluster \
          --namespace=kube-system \
          --name=aws-load-balancer-controller \
          --attach-policy-arn=arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:policy/AWSLoadBalancerControllerIAMPolicy \
          --override-existing-serviceaccounts \
          --approve
        helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller \
          --namespace kube-system \
          --set clusterName=my-weather-app-cluster \
          --set serviceAccount.create=false \
          --set serviceAccount.name=aws-load-balancer-controller \
          --wait
