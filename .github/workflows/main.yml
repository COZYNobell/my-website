name: Build and Deploy Application to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.build-image.outputs.image }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2 
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: my-node-app
          IMAGE_TAG: latest
        run: |
          IMAGE_URI=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "image=$IMAGE_URI" >> $GITHUB_OUTPUT

  deploy-to-seoul:
    name: Deploy App to EC2 (Seoul)
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Deploy Application Container to Seoul EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST_SEOUL }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_DEPLOY_KEY }}
          script: |
            echo "Deploying application container to Seoul EC2..."
            set -e # 오류 발생 시 즉시 스크립트 중단

            # ✨ 1. EC2에 Docker 설치 및 서비스 시작 ✨
            #    (Amazon Linux 2023 기준)
            echo "Installing Docker..."
            sudo dnf install docker -y
            sudo systemctl start docker
            sudo systemctl enable docker
            # ec2-user가 sudo 없이 docker 명령어를 사용할 수 있도록 권한 부여
            sudo usermod -aG docker ${{ secrets.EC2_USERNAME }}
            echo "Docker installed and started."

            CONTAINER_NAME="seoul-app-prod"
            IMAGE_URI="${{ needs.build.outputs.image_uri }}"

            # 2. ECR 로그인
            echo "Logging in to ECR..."
            aws ecr get-login-password --region ap-northeast-2 | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com
            
            # 3. 최신 이미지 가져오기
            echo "Pulling latest image..."
            sudo docker pull $IMAGE_URI
            
            # 4. 기존 컨테이너 중지 및 삭제
            echo "Stopping and removing old container..."
            if [ "$(sudo docker ps -q -f name=$CONTAINER_NAME)" ]; then sudo docker stop $CONTAINER_NAME; fi
            if [ "$(sudo docker ps -aq -f name=$CONTAINER_NAME)" ]; then sudo docker rm $CONTAINER_NAME; fi
            
            # 5. 새 컨테이너 실행
            echo "Running new container..."
            sudo docker run -d -p 80:3000 --name $CONTAINER_NAME --restart always \
              -e NODE_ENV="production" \
              -e DB_HOST="${{ secrets.DB_HOST_SEOUL }}" \
              -e DB_USER="${{ secrets.DB_USER_SEOUL }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD_SEOUL }}" \
              -e DB_NAME="${{ secrets.DB_NAME_SEOUL }}" \
              -e SESSION_SECRET="${{ secrets.SESSION_SECRET }}" \
              -e OPENWEATHERMAP_API_KEY_SECRET="${{ secrets.OPENWEATHERMAP_API_KEY_SECRET }}" \
              -e MAPS_API_KEY_SECRET="${{ secrets.MAPS_API_KEY_SECRET }}" \
              -e SNS_TOPIC_ARN="${{ secrets.SNS_TOPIC_ARN }}" \
              $IMAGE_URI
            
            echo "✅ Seoul EC2 deployment complete!"
            sudo docker logs --tail 20 $CONTAINER_NAME
