name: Provision Infrastructure and Deploy Applications

on:
  push:
    branches:
      - main
  workflow_dispatch: # Actions 탭에서 수동으로 실행 가능

jobs:
  # 1단계: Terraform으로 모든 인프라(VPC, EKS, IAM 등) 생성/업데이트
  provision-infrastructure:
    name: "Phase 1: Provision Infrastructure with Terraform"
    runs-on: ubuntu-latest
    permissions:
      id-token: write # OIDC 인증을 위해 필요
      contents: read
    outputs:
      # 다음 작업을 위해 Terraform 출력값을 전달합니다.
      cluster_name: ${{ steps.apply.outputs.cluster_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ap-northeast-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        run: terraform -chdir=terraform init

      - name: Terraform Apply
        id: apply
        run: |
          terraform -chdir=terraform apply -auto-approve -json | tee apply.json
          # 생성된 클러스터 이름을 출력으로 설정
          CLUSTER_NAME=$(jq -r '.outputs.cluster_name.value' apply.json)
          echo "cluster_name=$CLUSTER_NAME" >> $GITHUB_OUTPUT

  # 2단계: 생성된 EKS 클러스터에 애플리케이션 및 모니터링 배포
  deploy-to-eks:
    name: "Phase 2: Deploy Applications to EKS"
    runs-on: ubuntu-latest
    needs: [provision-infrastructure] # 인프라 생성이 성공해야 실행
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and Push Docker Image to ECR
        # Docker 이미지 빌드 및 ECR 푸시 로직
        id: build-image
        uses: aws-actions/amazon-ecr-login@v2
      - run: |
          docker build -t ${{ steps.login-ecr.outputs.registry }}/my-node-app:latest .
          docker push ${{ steps.login-ecr.outputs.registry }}/my-node-app:latest

      - name: Configure AWS credentials & Kubeconfig
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
          aws-region: ap-northeast-2
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --region ap-northeast-2 --name ${{ needs.provision-infrastructure.outputs.cluster_name }}

      - name: Install Helm
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 get_helm.sh && ./get_helm.sh

      - name: Deploy Monitoring Stack (Prometheus & Grafana)
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
          helm upgrade --install prometheus-stack prometheus-community/kube-prometheus-stack \
            --namespace monitoring \
            --set grafana.adminPassword='${{ secrets.GRAFANA_ADMIN_PASSWORD }}' \
            --wait

      - name: Deploy Weather App
        run: echo "To be implemented: kubectl apply -f k8s/..."

