# k8s/01-namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: weather-app

---
# k8s/02-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: weather-app
type: Opaque
# 이 Secret의 데이터는 GitHub Actions 워크플로우에서 자동으로 채워줍니다.
data: {}

---
# k8s/03-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: weather-app-deployment
  namespace: weather-app
spec:
  replicas: 2
  selector:
    matchLabels:
      app: weather-app
  template:
    metadata:
      labels:
        app: weather-app
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/path:   '/metrics'
        prometheus.io/port:   '3000'
    spec:
      containers:
      - name: weather-app-container
        image: 501257812675.dkr.ecr.ap-northeast-2.amazonaws.com/my-node-app:latest # ECR 이미지 주소
        ports:
        - containerPort: 3000
        envFrom:
        - secretRef:
            name: app-secrets
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "250m"

---
# k8s/04-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: weather-app-service
  namespace: weather-app
spec:
  selector:
    app: weather-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 3000

---
# k8s/05-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: weather-app-ingress
  namespace: weather-app
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
spec:
  rules:
    - host: app.your-final-domain.com # 여기에 최종 사용자 접속 도메인을 입력합니다.
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: weather-app-service
                port:
                  number: 80
