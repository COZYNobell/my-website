name: Manage EKS Cluster and Deploy Apps with Terraform

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - 'k8s/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform: apply or destroy'
        required: true
        default: 'apply'

jobs:
  # 1단계 작업: Terraform으로 EKS 클러스터 및 VPC 생성
  terraform:
    name: 'Terraform: Provision EKS Cluster'
    runs-on: ubuntu-latest
    permissions:
      id-token: write # OIDC 인증을 위해 필요
      contents: read

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
        aws-region: ap-northeast-2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.7

    - name: Terraform Init
      id: init
      run: terraform -chdir=terraform init

    - name: Terraform Validate
      id: validate
      run: terraform -chdir=terraform validate -no-color

    - name: Terraform Plan
      id: plan
      run: terraform -chdir=terraform plan -no-color
      if: github.event.inputs.action == 'apply'

    - name: Terraform Apply
      id: apply
      run: terraform -chdir=terraform apply -auto-approve -no-color
      if: github.event.inputs.action == 'apply'

    - name: Terraform Destroy
      id: destroy
      run: terraform -chdir=terraform destroy -auto-approve -no-color
      if: github.event.inputs.action == 'destroy'
      
  # 2단계 작업: 생성된 EKS 클러스터에 애플리케이션 및 모니터링 배포
  deploy-to-eks:
    name: 'Deploy Apps to EKS'
    runs-on: ubuntu-latest
    needs: [terraform] # ✨ Terraform 작업이 성공해야만 실행됩니다!
    if: github.event.inputs.action == 'apply' || github.event_name == 'push'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
        aws-region: ap-northeast-2
    
    - name: Install kubectl & Helm
      run: |
        # kubectl 설치
        curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.28.5/2024-01-04/bin/linux/amd64/kubectl
        chmod +x ./kubectl && sudo mv ./kubectl /usr/local/bin/
        # Helm 설치
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        chmod 700 get_helm.sh && ./get_helm.sh

    - name: Update kubeconfig to connect to the new cluster
      run: |
        aws eks update-kubeconfig --region ap-northeast-2 --name my-weather-app-cluster
        echo "Kubeconfig updated."
        kubectl get nodes # 클러스터 접속 확인

    - name: Deploy Monitoring Stack (Prometheus & Grafana)
      run: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo update
        kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
        helm upgrade --install prometheus-stack prometheus-community/kube-prometheus-stack \
          --namespace monitoring \
          --set grafana.adminPassword='${{ secrets.GRAFANA_ADMIN_PASSWORD }}' \
          --wait

    - name: Deploy Weather App
      run: |
        echo "Deploying Weather App manifests..."
        # 여기에 날씨 앱 배포를 위한 kubectl apply 또는 helm upgrade 명령어를 추가합니다.
        # 예시: kubectl apply -f k8s/weather-app-deployment.yaml
        # 예시: kubectl apply -f k8s/weather-app-service.yaml
