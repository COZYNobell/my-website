name: Deploy App and Monitoring to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # ... (build-and-push 작업은 이전과 동일)

  provision-and-deploy:
    name: Provision EC2 and Deploy App
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_DEPLOY_KEY }}" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key

      # ✨ SSH 호스트 키 검증을 비활성화하는 스텝 추가 ✨
      - name: Disable SSH Host Key Checking
        run: |
          mkdir -p ~/.ssh
          echo "Host *" > ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config
          echo "  UserKnownHostsFile /dev/null" >> ~/.ssh/config

      - name: Run Ansible Playbooks
        run: |
          ansible-playbook -i ansible/inventory.ini --private-key ~/.ssh/deploy_key ansible/setup-ec2-base.yaml --verbose
          ansible-playbook -i ansible/inventory.ini --private-key ~/.ssh/deploy_key ansible/setup-monitoring.yaml --verbose

      - name: Deploy Application Container
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST_SEOUL }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_DEPLOY_KEY }}
          # appleboy/ssh-action은 자체적으로 호스트 키 검증을 처리하는 옵션이 있지만,
          # 위 스텝에서 전역적으로 설정했으므로 추가 작업이 필요 없습니다.
          script: |
            # ... (이전과 동일한 애플리케이션 배포 스크립트)
