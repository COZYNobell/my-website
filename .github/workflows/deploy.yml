name: Build and Deploy Docker Image to Multi-Region EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-push-to-ecr:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    outputs:
      # ✨ login-ecr 단계의 registry 출력을 직접 사용하고, 나머지는 고정값 또는 job 레벨 env로 관리
      ecr_registry_output: ${{ steps.login-ecr.outputs.registry }} 
      image_tag_output: ${{ github.sha }} # 태그만 전달

    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }} # ECR 리포지토리가 있는 주 리전

      - name: 🏷️ Login to Amazon ECR
        id: login-ecr # outputs.registry 를 사용하기 위해 id 부여
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🏗️ Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: my-node-app # ✨ 메이슨님의 실제 ECR 리포지토리 이름
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "Image pushed to ECR: $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  deploy-to-ec2-seoul:
    name: Deploy to EC2 (Seoul)
    runs-on: ubuntu-latest
    needs: build-and-push-to-ecr
    env: # ✨ 작업 레벨 환경 변수로 ECR 정보 고정 (Secrets나 outputs을 안전하게 조합)
        ECR_REGISTRY_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com # 서울 리전 ECR
        ECR_REPOSITORY_NAME: my-node-app # ✨ 실제 ECR 리포지토리 이름
        IMAGE_TAG_FROM_BUILD: ${{ needs.build-and-push-to-ecr.outputs.image_tag_output }}

    steps:
      - name: 🐞 Debug Seoul Secrets and Variables
        run: |
          echo "Seoul EC2 Host: ${{ secrets.EC2_HOST_SEOUL }}"
          echo "ECR Registry URL (env): $ECR_REGISTRY_URL"
          echo "ECR Repository Name (env): $ECR_REPOSITORY_NAME"
          echo "Image Tag from build job (env): $IMAGE_TAG_FROM_BUILD"
      
      - name: 🚚 Deploy to Seoul EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST_SEOUL }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # EC2 인스턴스에 ECR 접근 IAM 역할이 연결되어 있다면, 별도의 ECR 로그인 불필요.
            # 만약 IAM 역할이 없다면 아래 로그인 필요 (secrets.AWS_ACCESS_KEY_ID 등을 SSH 통해 전달은 보안상 비권장)
            # 이 스크립트는 EC2 인스턴스 자체에 AWS CLI가 구성되어 있고, ECR 접근 권한이 있는 IAM 역할이 연결되었다고 가정합니다.
            
            IMAGE_URI="${ECR_REGISTRY_URL}/${ECR_REPOSITORY_NAME}:${IMAGE_TAG_FROM_BUILD}"
            CONTAINER_NAME="my-running-app-seoul"

            echo "배포할 새로운 이미지 URI: $IMAGE_URI"
            
            echo "1. 최신 이미지 pull..."
            # EC2 인스턴스의 IAM 역할이 ECR 접근 권한을 가지고 있어야 함
            docker pull $IMAGE_URI

            echo "2. 기존 컨테이너 중지 및 삭제..."
            if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
                docker stop $CONTAINER_NAME
                docker rm $CONTAINER_NAME
            fi

            echo "3. 서울 EC2에 새 컨테이너 시작..."
            docker run -d \
              -p 3000:3000 \
              -e "OPENWEATHERMAP_API_KEY=${{ secrets.OPENWEATHERMAP_API_KEY_SECRET }}" \
              -e "Maps_API_KEY=${{ secrets.MAPS_API_KEY_SECRET }}" \
              -e "DB_HOST=${{ secrets.DB_HOST_SEOUL }}" \
              -e "DB_USER=${{ secrets.DB_USER_SEOUL }}" \
              -e "DB_PASSWORD=${{ secrets.DB_PASSWORD_SEOUL }}" \
              -e "DB_NAME=${{ secrets.DB_NAME_SEOUL }}" \
              -e "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" \
              --restart always \
              --name $CONTAINER_NAME \
              $IMAGE_URI
            
            docker image prune -af || true
            echo "✅ 서울 EC2 배포 완료!"
            docker ps -f name=$CONTAINER_NAME # 실행된 컨테이너 정보 출력

  deploy-to-ec2-tokyo:
    name: Deploy to EC2 (Tokyo)
    runs-on: ubuntu-latest
    needs: build-and-push-to-ecr
    env: # ✨ 작업 레벨 환경 변수로 ECR 정보 고정
        ECR_REGISTRY_URL: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com # 도쿄 리전 ECR
        ECR_REPOSITORY_NAME: my-node-app # ✨ 실제 ECR 리포지토리 이름
        IMAGE_TAG_FROM_BUILD: ${{ needs.build-and-push-to-ecr.outputs.image_tag_output }}
    steps:
      - name: 🐞 Debug Tokyo Secrets and Variables
        run: |
          echo "Tokyo EC2 Host: ${{ secrets.EC2_HOST_TOKYO }}"
          echo "ECR Registry URL (env): $ECR_REGISTRY_URL"
          echo "ECR Repository Name (env): $ECR_REPOSITORY_NAME"
          echo "Image Tag from build job (env): $IMAGE_TAG_FROM_BUILD"

      - name: 🚚 Deploy to Tokyo EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST_TOKYO }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            IMAGE_URI="${ECR_REGISTRY_URL}/${ECR_REPOSITORY_NAME}:${IMAGE_TAG_FROM_BUILD}"
            CONTAINER_NAME="my-running-app-tokyo"

            echo "배포할 새로운 이미지 URI: $IMAGE_URI"
            docker pull $IMAGE_URI
            if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
                docker stop $CONTAINER_NAME
                docker rm $CONTAINER_NAME
            fi
            echo "도쿄 EC2에 새 컨테이너 시작..."
            docker run -d \
              -p 3000:3000 \
              -e "OPENWEATHERMAP_API_KEY=${{ secrets.OPENWEATHERMAP_API_KEY_SECRET }}" \
              -e "Maps_API_KEY=${{ secrets.MAPS_API_KEY_SECRET }}" \
              -e "DB_HOST=${{ secrets.DB_HOST_TOKYO }}" \
              -e "DB_USER=${{ secrets.DB_USER_TOKYO }}" \
              -e "DB_PASSWORD=${{ secrets.DB_PASSWORD_TOKYO }}" \
              -e "DB_NAME=${{ secrets.DB_NAME_TOKYO }}" \
              -e "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" \
              --restart always \
              --name $CONTAINER_NAME \
              $IMAGE_URI
            docker image prune -af || true
            echo "✅ 도쿄 EC2 배포 완료!"
            docker ps -f name=$CONTAINER_NAME
