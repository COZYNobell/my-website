name: Build and Deploy Docker Image to Multi-Region EC2

on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때 실행

jobs:
  build-and-push-to-ecr:
    name: Build Docker Image and Push to ECR
    runs-on: ubuntu-latest
    outputs:
      # 다음 작업에서 사용할 수 있도록 이미지 정보를 출력합니다.
      # ECR 리포지토리 이름만 출력 (ECR 전체 경로는 너무 길어서)
      ecr_repository_name: my-node-app 
      image_tag_sha: ${{ github.sha }}
      image_tag_latest: latest # 'latest' 태그를 명시적으로 출력

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          # aws-region은 ECR 리포지토리가 있는 리전으로 고정하는 것이 좋습니다.
          # 또는 secrets.AWS_ECR_REGION 같은 별도 Secret 사용 가능
          aws-region: ap-northeast-2 # 서울 ECR 기준

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY_URL: ${{ steps.login-ecr.outputs.registry }}
          # ECR_REPOSITORY_NAME을 Secret으로 관리하거나 여기서 직접 지정
          ECR_REPOSITORY_NAME: my-node-app # outputs.ecr_repository_name과 일치
          IMAGE_TAG_SHA: ${{ github.sha }}
          IMAGE_TAG_LATEST: latest        
        run: |
          echo "ECR Registry URL: $ECR_REGISTRY_URL"
          echo "ECR Repository Name: $ECR_REPOSITORY_NAME"
          
          docker build -t $ECR_REGISTRY_URL/$ECR_REPOSITORY_NAME:$IMAGE_TAG_SHA -t $ECR_REGISTRY_URL/$ECR_REPOSITORY_NAME:$IMAGE_TAG_LATEST .
          
          echo "Pushing SHA tagged image: $ECR_REGISTRY_URL/$ECR_REPOSITORY_NAME:$IMAGE_TAG_SHA"
          docker push $ECR_REGISTRY_URL/$ECR_REPOSITORY_NAME:$IMAGE_TAG_SHA
          
          echo "Pushing latest tagged image: $ECR_REGISTRY_URL/$ECR_REPOSITORY_NAME:$IMAGE_TAG_LATEST"
          docker push $ECR_REGISTRY_URL/$ECR_REPOSITORY_NAME:$IMAGE_TAG_LATEST
          echo "All images pushed to ECR."

  deploy-to-ec2-seoul:
    name: Deploy to EC2 (Seoul)
    runs-on: ubuntu-latest
    needs: build-and-push-to-ecr 
    environment: seoul-production # GitHub Environment 사용 시 (선택 사항)
    
    steps:
      - name: Deploy to Seoul EC2 instance
        uses: appleboy/ssh-action@v1.0.3 # 또는 사용하시는 최신 안정 버전
        with:
          host: ${{ secrets.EC2_HOST_SEOUL }}
          username: ${{ secrets.EC2_USERNAME }} 
          key: ${{ secrets.EC2_SSH_KEY }}      
          script: |
            echo "서울 EC2 배포 스크립트 시작 (`date`)"
            set -e # 오류 발생 시 즉시 스크립트 중단

            # 변수 설정 (ECR 정보는 서울 ECR 기준)
            ECR_REGISTRY_PATH="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com"
            ECR_REPOSITORY_NAME="${{ needs.build-and-push-to-ecr.outputs.ecr_repository_name }}"
            IMAGE_TAG_TO_DEPLOY="${{ needs.build-and-push-to-ecr.outputs.image_tag_latest }}" # 항상 'latest' 이미지 배포
            IMAGE_URI_TO_DEPLOY="${ECR_REGISTRY_PATH}/${ECR_REPOSITORY_NAME}:${IMAGE_TAG_TO_DEPLOY}"
            
            CONTAINER_NAME="seoul-app-prod" # 서울 운영용 컨테이너 이름

            echo "배포 이미지: ${IMAGE_URI_TO_DEPLOY}"
            echo "컨테이너 이름: ${CONTAINER_NAME}"

            echo "ECR 로그인 (ap-northeast-2)..."
            aws ecr get-login-password --region ap-northeast-2 | sudo docker login --username AWS --password-stdin ${ECR_REGISTRY_PATH}
            echo "ECR 로그인 성공."

            echo "최신 이미지 Pull: ${IMAGE_URI_TO_DEPLOY}"
            sudo docker pull ${IMAGE_URI_TO_DEPLOY}
            echo "이미지 Pull 완료."

            echo "기존 '${CONTAINER_NAME}' 컨테이너 중지/삭제..."
            if [ "$(sudo docker ps -q -f name=^/${CONTAINER_NAME}$)" ]; then sudo docker stop ${CONTAINER_NAME}; fi
            if [ "$(sudo docker ps -aq -f name=^/${CONTAINER_NAME}$)" ]; then sudo docker rm ${CONTAINER_NAME}; fi
            echo "기존 컨테이너 처리 완료."

            echo "새 컨테이너 실행 (서울 RDS 정보 사용)..."
            sudo docker run -d \
              -p 80:3000 \
              --name ${CONTAINER_NAME} \
              --restart always \
              -e NODE_ENV="production" \
              -e DB_HOST="${{ secrets.DB_HOST_SEOUL }}" \
              -e DB_USER="${{ secrets.DB_USER_SEOUL }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD_SEOUL }}" \
              -e DB_NAME="${{ secrets.DB_NAME_SEOUL }}" \
              -e SESSION_SECRET="${{ secrets.SESSION_SECRET }}" \
              -e OPENWEATHERMAP_API_KEY="${{ secrets.OPENWEATHERMAP_API_KEY_SECRET }}" \
              -e Maps_API_KEY="${{ secrets.MAPS_API_KEY_SECRET }}" \
              ${IMAGE_URI_TO_DEPLOY}
            echo "새 컨테이너 실행 요청 완료."
            
            sudo docker image prune -af || true 
            sleep 10 
            echo "✅ 서울 EC2 배포 완료! 실행 중인 컨테이너:"
            sudo docker ps -f name=${CONTAINER_NAME}
            echo "최근 로그 (50줄):"
            sudo docker logs --tail 50 ${CONTAINER_NAME}

  deploy-to-ec2-tokyo:
    name: Deploy to EC2 (Tokyo)
    runs-on: ubuntu-latest
    needs: build-and-push-to-ecr
    environment: tokyo-production # GitHub Environment 사용 시 (선택 사항)

    steps:
      - name: Deploy to Tokyo EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST_TOKYO }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}      
          script: |
            echo "도쿄 EC2 배포 스크립트 시작 (`date`)"
            set -e

            # 변수 설정 (ECR 정보는 서울 ECR 기준)
            ECR_REGISTRY_PATH="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com" # 이미지는 서울 ECR에서 가져옴
            ECR_REPOSITORY_NAME="${{ needs.build-and-push-to-ecr.outputs.ecr_repository_name }}"
            IMAGE_TAG_TO_DEPLOY="${{ needs.build-and-push-to-ecr.outputs.image_tag_latest }}" # 'latest' 태그 사용
            IMAGE_URI_TO_DEPLOY="${ECR_REGISTRY_PATH}/${ECR_REPOSITORY_NAME}:${IMAGE_TAG_TO_DEPLOY}"
            
            CONTAINER_NAME="tokyo-app-prod" # 도쿄 운영용 컨테이너 이름

            echo "배포 이미지 (서울 ECR에서 가져옴): ${IMAGE_URI_TO_DEPLOY}"
            echo "컨테이너 이름: ${CONTAINER_NAME}"

            echo "ECR 로그인 (ap-northeast-2)..."
            aws ecr get-login-password --region ap-northeast-2 | sudo docker login --username AWS --password-stdin ${ECR_REGISTRY_PATH}
            echo "ECR 로그인 성공."

            echo "최신 이미지 Pull: ${IMAGE_URI_TO_DEPLOY}"
            sudo docker pull ${IMAGE_URI_TO_DEPLOY}
            echo "이미지 Pull 완료."

            echo "기존 '${CONTAINER_NAME}' 컨테이너 중지/삭제..."
            if [ "$(sudo docker ps -q -f name=^/${CONTAINER_NAME}$)" ]; then sudo docker stop ${CONTAINER_NAME}; fi
            if [ "$(sudo docker ps -aq -f name=^/${CONTAINER_NAME}$)" ]; then sudo docker rm ${CONTAINER_NAME}; fi
            echo "기존 컨테이너 처리 완료."

            echo "새 컨테이너 실행 (도쿄 RDS 정보 사용)..."
            sudo docker run -d \
              -p 80:3000 \
              --name ${CONTAINER_NAME} \
              --restart always \
              -e NODE_ENV="production" \
              -e DB_HOST="${{ secrets.DB_HOST_TOKYO }}" \
              -e DB_USER="${{ secrets.DB_USER_TOKYO }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD_TOKYO }}" \
              -e DB_NAME="${{ secrets.DB_NAME_TOKYO }}" \
              -e SESSION_SECRET="${{ secrets.SESSION_SECRET }}" \
              -e OPENWEATHERMAP_API_KEY="${{ secrets.OPENWEATHERMAP_API_KEY_SECRET }}" \
              -e Maps_API_KEY="${{ secrets.MAPS_API_KEY_SECRET }}" \
              ${IMAGE_URI_TO_DEPLOY}
            echo "새 컨테이너 실행 요청 완료."

            sudo docker image prune -af || true
            sleep 10
            echo "✅ 도쿄 EC2 배포 완료! 실행 중인 컨테이너:"
            sudo docker ps -f name=${CONTAINER_NAME}
            echo "최근 로그 (50줄):"
            sudo docker logs --tail 50 ${CONTAINER_NAME}
