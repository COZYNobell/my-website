name: Build and Deploy Docker Image to Multi-Region EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-push-to-ecr:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    outputs:
      # ECR 리포지토리 이름과 이미지 태그만 다음 작업으로 전달
      built_ecr_repository: my-node-app # ✨ 메이슨님의 실제 ECR 리포지토리 이름
      built_image_tag: ${{ github.sha }}

    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }} # ECR 리포지토리가 있는 주 리전 (예: ap-northeast-2)

      - name: 🏷️ Login to Amazon ECR
        id: login-ecr # 이 단계는 Runner에서 ECR로 푸시하기 위해 필요
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🏗️ Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY_URL: ${{ steps.login-ecr.outputs.registry }} # 로그인 단계에서 얻은 ECR 레지스트리 URI
          ECR_REPOSITORY_NAME: my-node-app # ✨ 메이슨님의 실제 ECR 리포지토리 이름
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building image for ECR Registry: $ECR_REGISTRY_URL"
          echo "Target Repository: $ECR_REPOSITORY_NAME"
          echo "Image Tag: $IMAGE_TAG"
          
          docker build -t $ECR_REGISTRY_URL/$ECR_REPOSITORY_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY_URL/$ECR_REPOSITORY_NAME:$IMAGE_TAG
          
          echo "Image pushed to ECR: $ECR_REGISTRY_URL/$ECR_REPOSITORY_NAME:$IMAGE_TAG"

  deploy-to-ec2-seoul:
    name: Deploy to EC2 (Seoul)
    runs-on: ubuntu-latest
    needs: build-and-push-to-ecr # 이전 작업의 outputs 필요
    
    steps:
      - name: 🐞 Debug Seoul Variables
        run: |
          echo "Seoul EC2 Host: ${{ secrets.EC2_HOST_SEOUL }}"
          echo "AWS Account ID for ECR: ${{ secrets.AWS_ACCOUNT_ID }}"
          echo "ECR Repository from needs: [${{ needs.build-and-push-to-ecr.outputs.built_ecr_repository }}]"
          echo "Image Tag from needs: [${{ needs.build-and-push-to-ecr.outputs.built_image_tag }}]"
      
      - name: 🚚 Deploy to Seoul EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST_SEOUL }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # EC2 인스턴스에 ECR 접근 IAM 역할이 연결되어 있으므로, 별도의 ECR 로그인 명령은 필요 없습니다.
            
            # ECR 레지스트리 주소 직접 구성 (서울 리전용)
            ECR_REGISTRY_URL_SEOUL="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com" # 서울 리전
            ECR_REPOSITORY_VAL="${{ needs.build-and-push-to-ecr.outputs.built_ecr_repository }}"
            IMAGE_TAG_VAL="${{ needs.build-and-push-to-ecr.outputs.built_image_tag }}"
            
            if [ -z "$ECR_REGISTRY_URL_SEOUL" ] || [ -z "$ECR_REPOSITORY_VAL" ] || [ -z "$IMAGE_TAG_VAL" ] || [ "${{ secrets.AWS_ACCOUNT_ID }}" == "" ]; then
              echo "오류: ECR 이미지 정보를 구성하는 데 필요한 값이 누락되었습니다 (서울)."
              exit 1
            fi
            
            IMAGE_URI="$ECR_REGISTRY_URL_SEOUL/$ECR_REPOSITORY_VAL:$IMAGE_TAG_VAL"
            CONTAINER_NAME="my-running-app-seoul"

            echo "배포할 새로운 이미지 URI (서울): $IMAGE_URI"
            
            echo "1. 최신 이미지 pull (서울)..."
            docker pull $IMAGE_URI
            if [ $? -ne 0 ]; then echo "docker pull 실패! (서울)"; exit 1; fi

            echo "2. 기존 컨테이너 중지 및 삭제 (서울)..."
            if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
                docker stop $CONTAINER_NAME && docker rm $CONTAINER_NAME
            fi

            echo "3. 서울 EC2에 새 컨테이너 시작..."
            docker run -d \
              -p 3000:3000 \
              -e "OPENWEATHERMAP_API_KEY=${{ secrets.OPENWEATHERMAP_API_KEY_SECRET }}" \
              -e "Maps_API_KEY=${{ secrets.MAPS_API_KEY_SECRET }}" \
              -e "DB_HOST=${{ secrets.DB_HOST_SEOUL }}" \
              -e "DB_USER=${{ secrets.DB_USER_SEOUL }}" \
              -e "DB_PASSWORD=${{ secrets.DB_PASSWORD_SEOUL }}" \
              -e "DB_NAME=${{ secrets.DB_NAME_SEOUL }}" \
              -e "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" \
              --restart always \
              --name $CONTAINER_NAME \
              $IMAGE_URI
            if [ $? -ne 0 ]; then echo "docker run 실패! (서울)"; exit 1; fi
            
            docker image prune -af || true
            echo "✅ 서울 EC2 배포 완료!"
            docker ps -f name=$CONTAINER_NAME

  deploy-to-ec2-tokyo:
    name: Deploy to EC2 (Tokyo)
    runs-on: ubuntu-latest
    needs: build-and-push-to-ecr
    steps:
      - name: 🐞 Debug Tokyo Variables
        run: |
          echo "Tokyo EC2 Host: ${{ secrets.EC2_HOST_TOKYO }}"
          echo "AWS Account ID for ECR: ${{ secrets.AWS_ACCOUNT_ID }}"
          echo "ECR Repository from needs: [${{ needs.build-and-push-to-ecr.outputs.built_ecr_repository }}]"
          echo "Image Tag from needs: [${{ needs.build-and-push-to-ecr.outputs.built_image_tag }}]"

      - name: 🚚 Deploy to Tokyo EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST_TOKYO }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # ECR 레지스트리 주소 직접 구성 (도쿄 리전용)
            ECR_REGISTRY_URL_TOKYO="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com" # 도쿄 리전
            ECR_REPOSITORY_VAL="${{ needs.build-and-push-to-ecr.outputs.built_ecr_repository }}"
            IMAGE_TAG_VAL="${{ needs.build-and-push-to-ecr.outputs.built_image_tag }}"

            if [ -z "$ECR_REGISTRY_URL_TOKYO" ] || [ -z "$ECR_REPOSITORY_VAL" ] || [ -z "$IMAGE_TAG_VAL" ] || [ "${{ secrets.AWS_ACCOUNT_ID }}" == "" ]; then
              echo "오류: ECR 이미지 정보를 구성하는 데 필요한 값이 누락되었습니다 (도쿄)."
              exit 1
            fi

            IMAGE_URI="$ECR_REGISTRY_URL_TOKYO/$ECR_REPOSITORY_VAL:$IMAGE_TAG_VAL"
            CONTAINER_NAME="my-running-app-tokyo"
            
            echo "배포할 새로운 이미지 URI (도쿄): $IMAGE_URI"
            docker pull $IMAGE_URI
            if [ $? -ne 0 ]; then echo "docker pull 실패! (도쿄)"; exit 1; fi

            if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
                docker stop $CONTAINER_NAME && docker rm $CONTAINER_NAME
            fi
            echo "도쿄 EC2에 새 컨테이너 시작..."
            docker run -d \
              -p 3000:3000 \
              -e "OPENWEATHERMAP_API_KEY=${{ secrets.OPENWEATHERMAP_API_KEY_SECRET }}" \
              -e "Maps_API_KEY=${{ secrets.MAPS_API_KEY_SECRET }}" \
              -e "DB_HOST=${{ secrets.DB_HOST_TOKYO }}" \
              -e "DB_USER=${{ secrets.DB_USER_TOKYO }}" \
              -e "DB_PASSWORD=${{ secrets.DB_PASSWORD_TOKYO }}" \
              -e "DB_NAME=${{ secrets.DB_NAME_TOKYO }}" \
              -e "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" \
              --restart always \
              --name $CONTAINER_NAME \
              $IMAGE_URI
            if [ $? -ne 0 ]; then echo "docker run 실패! (도쿄)"; exit 1; fi
            
            docker image prune -af || true
            echo "✅ 도쿄 EC2 배포 완료!"
            docker ps -f name=$CONTAINER_NAME
