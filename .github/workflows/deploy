name: Build and Deploy Docker Image to EC2 (via ECR)

on:
  push:
    branches:
      - main # 'main' 브랜치에 푸시될 때 실행

jobs:
  build-and-push-to-ecr: # 1단계: Docker 이미지 빌드 및 ECR에 푸시
    name: Build and Push to ECR
    runs-on: ubuntu-latest # GitHub Actions 실행 환경

    outputs: # ✨ 이 작업의 출력을 다음 작업에서 사용할 수 있도록 설정
      image_uri: ${{ steps.build-image.outputs.image_uri }}

    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # GitHub Secret
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # GitHub Secret
          aws-region: ap-northeast-2 # 또는 메이슨님의 ECR/EC2 리전 (예: 시드니는 ap-southeast-2)

      - name: 🏷️ Login to Amazon ECR
        id: login-ecr # 이 단계에 id를 부여하여 outputs을 참조할 수 있게 함
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🏗️ Build, tag, and push image to Amazon ECR
        id: build-image # 이 단계에 id를 부여하여 outputs을 참조할 수 있게 함
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: my-node-app # ✨ 메이슨님의 실제 ECR 리포지토리 이름으로 변경!
          IMAGE_TAG: ${{ github.sha }} # Git 커밋 해시를 이미지 태그로 사용
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image_uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  deploy-to-ec2: # 2단계: EC2에 접속하여 새 Docker 이미지로 업데이트
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push-to-ecr # 이전 'build-and-push-to-ecr' 작업이 성공해야 실행됨

    steps:
      - name: ⚙️ Configure AWS credentials (for ECR login on EC2 if needed, or other AWS commands)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # GitHub Secret
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # GitHub Secret
          aws-region: ap-northeast-2 # 또는 메이슨님의 EC2 리전

      - name: 🚚 Deploy to EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }} # GitHub Secret (EC2 Public IP)
          username: ${{ secrets.EC2_USERNAME }} # GitHub Secret (예: ec2-user)
          key: ${{ secrets.EC2_SSH_KEY }} # GitHub Secret (EC2 접속용 SSH 비밀키)
          script: |
            # EC2 인스턴스에 ECR ReadOnly 권한이 있는 IAM 역할이 연결되어 있다면,
            # 아래 ECR 로그인 과정은 더 간단해지거나 생략될 수 있습니다.
            # 여기서는 aws-actions/amazon-ecr-login을 Runner에서 사용했으므로,
            # EC2에서는 AWS CLI를 사용하여 ECR에 로그인하는 예시를 보여줍니다.
            # (또는 EC2 인스턴스 프로파일에 ECR 접근 권한을 주는 것이 더 일반적입니다)
            echo "ECR 로그인 시도..."
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            # 위 ${{ secrets.AWS_REGION }}은 configure-aws-credentials에서 사용한 리전과 동일해야 합니다.
            # ${{ secrets.AWS_ACCOUNT_ID }} Secret도 GitHub에 추가해야 합니다. (AWS 계정 ID)

            IMAGE_URI="${{ needs.build-and-push-to-ecr.outputs.image_uri }}"
            CONTAINER_NAME="my-running-app"

            echo "배포할 새로운 이미지 URI: $IMAGE_URI"
            echo "EC2에서 Docker 컨테이너 업데이트를 시작합니다..."

            echo "1. 최신 이미지 pull 시도..."
            docker pull $IMAGE_URI

            echo "2. 기존 컨테이너 중지 및 삭제 시도 (만약 실행 중이라면)..."
            if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
                echo "기존 $CONTAINER_NAME 컨테이너를 중지하고 삭제합니다."
                docker stop $CONTAINER_NAME
                docker rm $CONTAINER_NAME
            else
                echo "실행 중인 $CONTAINER_NAME 컨테이너가 없습니다."
            fi

            echo "3. 새로운 이미지로 $CONTAINER_NAME 컨테이너를 시작합니다."
            # 환경 변수는 Docker 이미지에 직접 포함시키지 않고, 실행 시점에 주입합니다.
            # 이 값들은 GitHub Secrets에서 가져옵니다.
            docker run -d \
              -p 3000:3000 \
              -e "OPENWEATHERMAP_API_KEY=${{ secrets.OPENWEATHERMAP_API_KEY_SECRET }}" \
              -e "Maps_API_KEY=${{ secrets.Maps_API_KEY_SECRET }}" \
              -e "DB_HOST=${{ secrets.DB_HOST }}" \
              -e "DB_USER=${{ secrets.DB_USER }}" \
              -e "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" \
              -e "DB_NAME=${{ secrets.DB_NAME }}" \
              -e "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" \
              --restart always \
              --name $CONTAINER_NAME \
              $IMAGE_URI

            echo "(선택 사항) 오래된 Docker 이미지 정리 시도..."
            docker image prune -af || true 

            echo "✅ EC2 배포 완료! 실행 중인 컨테이너:"
            docker ps -f name=$CONTAINER_NAME
