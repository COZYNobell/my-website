name: Full CI/CD Pipeline with Terraform and EKS

on:
  push:
    branches:
      - main
  # 수동 실행을 위한 설정입니다. 'apply' 또는 'destroy' 액션을 선택할 수 있습니다.
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform: apply (create/update) or destroy'
        required: true
        default: 'apply'

jobs:
  # 1단계 작업: Terraform으로 모든 인프라(VPC, EKS, RDS 등) 생성 또는 파기
  provision-infrastructure:
    name: 'Phase 1: Provision Infrastructure with Terraform'
    runs-on: ubuntu-latest
    permissions:
      id-token: write # OIDC 인증을 위해 필요
      contents: read
    outputs:
      # 다음 작업을 위해 Terraform 출력값을 전달합니다.
      rds_endpoint: ${{ steps.apply.outputs.rds_endpoint }}
      db_name: ${{ steps.apply.outputs.db_name }}
      iam_role_arn: ${{ steps.apply.outputs.github_actions_role_arn }}

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_IAM_ROLE_ARN }}
        aws-region: ap-northeast-2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      run: terraform -chdir=terraform init

    - name: Terraform Apply
      id: apply
      # apply 또는 push 이벤트일 때만 실행합니다.
      if: github.event.inputs.action == 'apply' || github.event_name == 'push'
      run: |
        # -json 옵션으로 출력을 JSON 형식으로 받아, jq로 파싱하여 다음 단계에 전달
        terraform -chdir=terraform apply -auto-approve -json \
          -var-file="terraform.tfvars" \
          -var="db_password=${{ secrets.DB_PASSWORD_SEOUL }}" | tee apply.json
        
        # Terraform 출력값을 GitHub Actions 출력 변수로 설정
        echo "rds_endpoint=$(jq -r '.outputs.seoul_rds_endpoint.value' apply.json)" >> $GITHUB_OUTPUT
        echo "db_name=$(jq -r '.outputs.seoul_rds_endpoint.value' apply.json)" >> $GITHUB_OUTPUT # 이 부분은 seoul_rds_endpoint가 아니라 db_name_seoul을 참조해야 할 수 있습니다.
        echo "github_actions_role_arn=$(jq -r '.outputs.github_actions_role_arn.value' apply.json)" >> $GITHUB_OUTPUT

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: terraform -chdir=terraform destroy -auto-approve -no-color -var-file="terraform.tfvars" -var="db_password=${{ secrets.DB_PASSWORD_SEOUL }}"
      
  # 2단계 작업: 생성된 EKS 클러스터에 애플리케이션 및 모니터링 배포
  deploy-to-eks:
    name: 'Phase 2: Build and Deploy Apps to EKS'
    runs-on: ubuntu-latest
    needs: [provision-infrastructure] # 인프라 생성이 성공해야만 실행
    if: success() && (github.event.inputs.action == 'apply' || github.event_name == 'push')
    permissions:
      id-token: write
      contents: read

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ needs.provision-infrastructure.outputs.iam_role_arn }}
        aws-region: ap-northeast-2
    
    - name: Build and Push Docker Image to ECR
      id: build-image
      uses: aws-actions/amazon-ecr-login@v2
    - run: |
        docker build -t ${{ steps.build-image.outputs.registry }}/my-node-app:${{ github.sha }} -t ${{ steps.build-image.outputs.registry }}/my-node-app:latest .
        docker push --all-tags ${{ steps.build-image.outputs.registry }}/my-node-app
    
    - name: Install Utilities (kubectl, helm)
      run: |
        # kubectl 설치
        curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.28.5/2024-01-04/bin/linux/amd64/kubectl
        chmod +x ./kubectl && sudo mv ./kubectl /usr/local/bin/
        # Helm 설치
        curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
        chmod 700 get_helm.sh && ./get_helm.sh

    - name: Update kubeconfig to connect to cluster
      run: aws eks update-kubeconfig --region ap-northeast-2 --name my-weather-app-cluster

    - name: Deploy Kubernetes Addons and Application
      run: |
        # Monitoring Stack, LB Controller, App Secrets, Weather App 배포
        # (이전 워크플로우의 배포 스크립트들을 여기에 통합)
        echo "Deploying Addons and Application..."
        # helm upgrade ... (kube-prometheus-stack)
        # helm upgrade ... (aws-load-balancer-controller)
        # kubectl apply -f ... (k8s/secrets.yaml)
        # kubectl apply -f ... (k8s/deployment.yaml)
