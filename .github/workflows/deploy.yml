name: Build and Deploy Docker Image to Multi-Region EC2

on:
  push:
    branches:
      - main

jobs:
  build-and-push-to-ecr: # 이 작업은 메이슨님 기존 내용 그대로 사용합니다.
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    outputs:
      built_ecr_repository: my-node-app # 메이슨님의 실제 ECR 리포지토리 이름
      built_image_tag: ${{ github.sha }}

    steps:
      - name: 🛎️ Checkout code
        uses: actions/checkout@v4

      - name: ⚙️ Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }} # ECR 리포지토리가 있는 주 리전 (예: ap-northeast-2)

      - name: 🏷️ Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: 🏗️ Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY_URL: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY_NAME: my-node-app # 메이슨님의 실제 ECR 리포지토리 이름
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "Building image for ECR Registry: $ECR_REGISTRY_URL"
          echo "Target Repository: $ECR_REPOSITORY_NAME"
          echo "Image Tag: $IMAGE_TAG"
          
          docker build -t $ECR_REGISTRY_URL/$ECR_REPOSITORY_NAME:$IMAGE_TAG .
          docker push $ECR_REGISTRY_URL/$ECR_REPOSITORY_NAME:$IMAGE_TAG
          
          echo "Image pushed to ECR: $ECR_REGISTRY_URL/$ECR_REPOSITORY_NAME:$IMAGE_TAG"

  deploy-to-ec2-seoul: # ⭐ 이 작업의 script 부분이 수정되었습니다! ⭐
    name: Deploy to EC2 (Seoul)
    runs-on: ubuntu-latest
    needs: build-and-push-to-ecr
    
    steps:
      - name: 🐞 Debug Seoul Variables # 이 디버그 단계는 그대로 두었습니다.
        run: |
          echo "Seoul EC2 Host: ${{ secrets.EC2_HOST_SEOUL }}"
          echo "AWS Account ID for ECR: ${{ secrets.AWS_ACCOUNT_ID }}"
          echo "ECR Repository from needs: [${{ needs.build-and-push-to-ecr.outputs.built_ecr_repository }}]"
          echo "Image Tag from needs: [${{ needs.build-and-push-to-ecr.outputs.built_image_tag }}]"
      
      - name: 🚚 Deploy to Seoul EC2 instance
        uses: appleboy/ssh-action@v1.0.3 # 메이슨님이 사용하시던 버전
        with:
          host: ${{ secrets.EC2_HOST_SEOUL }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: | # ⭐ 이 아래 script: 내용을 이전 답변에서 드린 것으로 교체했습니다. ⭐
            echo "서울 EC2 배포 스크립트 시작 (`date`)"
            set -e # 오류 발생 시 즉시 스크립트 중단

            # --- 0. 변수 설정 (ECR 정보는 needs context에서 가져옴) ---
            AWS_ACCOUNT_ID_IN_SCRIPT="${{ secrets.AWS_ACCOUNT_ID }}" # 스크립트 내 변수명 충돌 방지
            AWS_DEFAULT_REGION_IN_SCRIPT="ap-northeast-2" # 서울 리전 ECR 기준

            # build 작업에서 전달된 ECR 리포지토리 이름과 이미지 태그 사용
            ECR_REPOSITORY_FROM_BUILD_IN_SCRIPT="${{ needs.build-and-push-to-ecr.outputs.built_ecr_repository }}"
            IMAGE_TAG_FROM_BUILD_IN_SCRIPT="${{ needs.build-and-push-to-ecr.outputs.built_image_tag }}"

            ECR_REGISTRY_URL_SEOUL_IN_SCRIPT="${AWS_ACCOUNT_ID_IN_SCRIPT}.dkr.ecr.${AWS_DEFAULT_REGION_IN_SCRIPT}.amazonaws.com"
            IMAGE_URI_IN_SCRIPT="${ECR_REGISTRY_URL_SEOUL_IN_SCRIPT}/${ECR_REPOSITORY_FROM_BUILD_IN_SCRIPT}:${IMAGE_TAG_FROM_BUILD_IN_SCRIPT}"
            
            # 애플리케이션 컨테이너에 부여할 고유한 이름 (메이슨님 기존 이름 사용)
            CONTAINER_NAME_IN_SCRIPT="my-running-app-seoul"

            echo "배포 대상 이미지: ${IMAGE_URI_IN_SCRIPT}"
            echo "사용할 컨테이너 이름: ${CONTAINER_NAME_IN_SCRIPT}"

            # --- 1. AWS ECR 로그인 (중요!) ---
            echo "AWS ECR에 로그인합니다 (${AWS_DEFAULT_REGION_IN_SCRIPT})..."
            aws ecr get-login-password --region ${AWS_DEFAULT_REGION_IN_SCRIPT} | sudo docker login --username AWS --password-stdin ${ECR_REGISTRY_URL_SEOUL_IN_SCRIPT}
            echo "ECR 로그인 성공."

            # --- 2. 최신 Docker 이미지 Pull ---
            echo "최신 이미지를 Pull합니다: ${IMAGE_URI_IN_SCRIPT}"
            sudo docker pull ${IMAGE_URI_IN_SCRIPT}
            if [ $? -ne 0 ]; then echo "!!! docker pull 실패! (서울)"; exit 1; fi
            echo "이미지 Pull 완료."

            # --- 3. 기존 컨테이너 중지 및 삭제 (있을 경우) ---
            echo "기존 '${CONTAINER_NAME_IN_SCRIPT}' 컨테이너를 확인하고 중지/삭제합니다..."
            if [ "$(sudo docker ps -q -f name=^/${CONTAINER_NAME_IN_SCRIPT}$)" ]; then # 정확한 이름 매칭
                echo "실행 중인 '${CONTAINER_NAME_IN_SCRIPT}' 컨테이너를 중지합니다."
                sudo docker stop ${CONTAINER_NAME_IN_SCRIPT}
            else
                echo "실행 중인 '${CONTAINER_NAME_IN_SCRIPT}' 컨테이너가 없습니다."
            fi

            if [ "$(sudo docker ps -aq -f name=^/${CONTAINER_NAME_IN_SCRIPT}$)" ]; then
                echo "기존 '${CONTAINER_NAME_IN_SCRIPT}' 컨테이너를 삭제합니다."
                sudo docker rm ${CONTAINER_NAME_IN_SCRIPT}
            else
                echo "삭제할 기존 '${CONTAINER_NAME_IN_SCRIPT}' 컨테이너가 없습니다."
            fi
            echo "기존 컨테이너 처리 완료."

            # --- 4. 새로운 Docker 컨테이너 실행 (환경 변수 주입) ---
            echo "새로운 '${CONTAINER_NAME_IN_SCRIPT}' 컨테이너를 실행합니다..."
            sudo docker run -d \
              -p 80:3000 \
              --name ${CONTAINER_NAME_IN_SCRIPT} \
              --restart always \
              -e NODE_ENV="production" \
              -e DB_HOST="${{ secrets.DB_HOST_SEOUL }}" \
              -e DB_USER="${{ secrets.DB_USER_SEOUL }}" \
              -e DB_PASSWORD="${{ secrets.DB_PASSWORD_SEOUL }}" \
              -e DB_NAME="${{ secrets.DB_NAME_SEOUL }}" \
              -e SESSION_SECRET="${{ secrets.SESSION_SECRET }}" \
              -e OPENWEATHERMAP_API_KEY="${{ secrets.OPENWEATHERMAP_API_KEY_SECRET }}" \
              -e Maps_API_KEY="${{ secrets.MAPS_API_KEY_SECRET }}" \
              ${IMAGE_URI_IN_SCRIPT}
            if [ $? -ne 0 ]; then echo "!!! docker run 실패! (서울)"; exit 1; fi
            echo "새로운 컨테이너 실행 요청 완료."

            # --- 5. 불필요한 Docker 이미지 정리 (메이슨님 기존 로직) ---
            echo "불필요한 Docker 이미지를 정리합니다..."
            sudo docker image prune -af || true # 실패해도 계속 진행
            echo "이미지 정리 완료."
            
            # --- 6. 실행 확인 (간단 로그) ---
            echo "잠시 후 '${CONTAINER_NAME_IN_SCRIPT}' 컨테이너 상태를 확인합니다..."
            sleep 5 # 컨테이너가 시작될 시간을 잠시 줍니다.
            sudo docker ps -f name=^/${CONTAINER_NAME_IN_SCRIPT}$
            echo "'${CONTAINER_NAME_IN_SCRIPT}' 컨테이너의 최근 로그 일부:"
            sudo docker logs --tail 20 ${CONTAINER_NAME_IN_SCRIPT}

            echo "✅ 서울 EC2 배포 완료! (`date`)"

  deploy-to-ec2-tokyo: # 이 작업은 메이슨님 기존 내용 그대로 사용합니다. (도쿄는 제작 중)
    name: Deploy to EC2 (Tokyo)
    runs-on: ubuntu-latest
    needs: build-and-push-to-ecr
    steps:
      - name: 🐞 Debug Tokyo Variables
        run: |
          echo "Tokyo EC2 Host: ${{ secrets.EC2_HOST_TOKYO }}"
          echo "AWS Account ID for ECR: ${{ secrets.AWS_ACCOUNT_ID }}"
          echo "ECR Repository from needs: [${{ needs.build-and-push-to-ecr.outputs.built_ecr_repository }}]"
          echo "Image Tag from needs: [${{ needs.build-and-push-to-ecr.outputs.built_image_tag }}]"

      - name: 🚚 Deploy to Tokyo EC2 instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST_TOKYO }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # ECR 레지스트리 주소 직접 구성 (도쿄 리전용)
            ECR_REGISTRY_URL_TOKYO="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-1.amazonaws.com" # 도쿄 리전
            ECR_REPOSITORY_VAL="${{ needs.build-and-push-to-ecr.outputs.built_ecr_repository }}"
            IMAGE_TAG_VAL="${{ needs.build-and-push-to-ecr.outputs.built_image_tag }}"

            if [ -z "$ECR_REGISTRY_URL_TOKYO" ] || [ -z "$ECR_REPOSITORY_VAL" ] || [ -z "$IMAGE_TAG_VAL" ] || [ "${{ secrets.AWS_ACCOUNT_ID }}" == "" ]; then
              echo "오류: ECR 이미지 정보를 구성하는 데 필요한 값이 누락되었습니다 (도쿄)."
              exit 1
            fi

            IMAGE_URI="$ECR_REGISTRY_URL_TOKYO/$ECR_REPOSITORY_VAL:$IMAGE_TAG_VAL"
            CONTAINER_NAME="my-running-app-tokyo"
            
            echo "배포할 새로운 이미지 URI (도쿄): $IMAGE_URI"
            # 도쿄는 제작 중이므로, 실제 docker pull 및 run은 주석 처리하거나 나중에 활성화
            # sudo docker pull $IMAGE_URI
            # if [ $? -ne 0 ]; then echo "docker pull 실패! (도쿄)"; exit 1; fi

            # if [ "$(sudo docker ps -q -f name=$CONTAINER_NAME)" ]; then
            #   sudo docker stop $CONTAINER_NAME && sudo docker rm $CONTAINER_NAME
            # fi
            # echo "도쿄 EC2에 새 컨테이너 시작..."
            # sudo docker run -d \
            #   -p 3000:3000 \
            #   -e "OPENWEATHERMAP_API_KEY=${{ secrets.OPENWEATHERMAP_API_KEY_SECRET }}" \
            #   -e "Maps_API_KEY=${{ secrets.MAPS_API_KEY_SECRET }}" \
            #   -e "DB_HOST=${{ secrets.DB_HOST_TOKYO }}" \
            #   -e "DB_USER=${{ secrets.DB_USER_TOKYO }}" \
            #   -e "DB_PASSWORD=${{ secrets.DB_PASSWORD_TOKYO }}" \
            #   -e "DB_NAME=${{ secrets.DB_NAME_TOKYO }}" \
            #   -e "SESSION_SECRET=${{ secrets.SESSION_SECRET }}" \
            #   --restart always \
            #   --name $CONTAINER_NAME \
            #   $IMAGE_URI
            # if [ $? -ne 0 ]; then echo "docker run 실패! (도쿄)"; exit 1; fi
            
            # sudo docker image prune -af || true
            echo "✅ 도쿄 EC2 배포 작업은 현재 준비 중입니다 (실제 배포는 주석 처리됨)."
            # sudo docker ps -f name=$CONTAINER_NAME
